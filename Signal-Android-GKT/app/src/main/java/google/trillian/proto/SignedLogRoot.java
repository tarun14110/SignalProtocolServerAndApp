// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian.proto

package google.trillian.proto;

/**
 * <pre>
 * SignedLogRoot represents a commitment by a Log to a particular tree.
 * </pre>
 *
 * Protobuf type {@code trillian.SignedLogRoot}
 */
public  final class SignedLogRoot extends
    com.google.protobuf.GeneratedMessageLite<
        SignedLogRoot, SignedLogRoot.Builder> implements
    // @@protoc_insertion_point(message_implements:trillian.SignedLogRoot)
    SignedLogRootOrBuilder {
  private SignedLogRoot() {
    keyHint_ = com.google.protobuf.ByteString.EMPTY;
    logRoot_ = com.google.protobuf.ByteString.EMPTY;
    logRootSignature_ = com.google.protobuf.ByteString.EMPTY;
  }
  public static final int KEY_HINT_FIELD_NUMBER = 7;
  private com.google.protobuf.ByteString keyHint_;
  /**
   * <pre>
   * key_hint is a hint to identify the public key for signature verification.
   * key_hint is not authenticated and may be incorrect or missing, in which
   * case all known public keys may be used to verify the signature.
   * When directly communicating with a Trillian gRPC server, the key_hint will
   * typically contain the LogID encoded as a big-endian 64-bit integer;
   * however, in other contexts the key_hint is likely to have different
   * contents (e.g. it could be a GUID, a URL + TreeID, or it could be
   * derived from the public key itself).
   * </pre>
   *
   * <code>bytes key_hint = 7;</code>
   * @return The keyHint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getKeyHint() {
    return keyHint_;
  }
  /**
   * <pre>
   * key_hint is a hint to identify the public key for signature verification.
   * key_hint is not authenticated and may be incorrect or missing, in which
   * case all known public keys may be used to verify the signature.
   * When directly communicating with a Trillian gRPC server, the key_hint will
   * typically contain the LogID encoded as a big-endian 64-bit integer;
   * however, in other contexts the key_hint is likely to have different
   * contents (e.g. it could be a GUID, a URL + TreeID, or it could be
   * derived from the public key itself).
   * </pre>
   *
   * <code>bytes key_hint = 7;</code>
   * @param value The keyHint to set.
   */
  private void setKeyHint(com.google.protobuf.ByteString value) {
    value.getClass();
  
    keyHint_ = value;
  }
  /**
   * <pre>
   * key_hint is a hint to identify the public key for signature verification.
   * key_hint is not authenticated and may be incorrect or missing, in which
   * case all known public keys may be used to verify the signature.
   * When directly communicating with a Trillian gRPC server, the key_hint will
   * typically contain the LogID encoded as a big-endian 64-bit integer;
   * however, in other contexts the key_hint is likely to have different
   * contents (e.g. it could be a GUID, a URL + TreeID, or it could be
   * derived from the public key itself).
   * </pre>
   *
   * <code>bytes key_hint = 7;</code>
   */
  private void clearKeyHint() {
    
    keyHint_ = getDefaultInstance().getKeyHint();
  }

  public static final int LOG_ROOT_FIELD_NUMBER = 8;
  private com.google.protobuf.ByteString logRoot_;
  /**
   * <pre>
   * log_root holds the TLS-serialization of the following structure (described
   * in RFC5246 notation): Clients should validate log_root_signature with
   * VerifySignedLogRoot before deserializing log_root.
   * enum { v1(1), (65535)} Version;
   * struct {
   *   uint64 tree_size;
   *   opaque root_hash&lt;0..128&gt;;
   *   uint64 timestamp_nanos;
   *   uint64 revision;
   *   opaque metadata&lt;0..65535&gt;;
   * } LogRootV1;
   * struct {
   *   Version version;
   *   select(version) {
   *     case v1: LogRootV1;
   *   }
   * } LogRoot;
   * A serialized v1 log root will therefore be laid out as:
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
   * | ver=1 |          tree_size            |len|    root_hash      |
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   * |        timestamp_nanos        |      revision                 |
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   * +---+---+---+---+---+-....---+
   * |  len  |    metadata        |
   * +---+---+---+---+---+-....---+
   * (with all integers encoded big-endian).
   * </pre>
   *
   * <code>bytes log_root = 8;</code>
   * @return The logRoot.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getLogRoot() {
    return logRoot_;
  }
  /**
   * <pre>
   * log_root holds the TLS-serialization of the following structure (described
   * in RFC5246 notation): Clients should validate log_root_signature with
   * VerifySignedLogRoot before deserializing log_root.
   * enum { v1(1), (65535)} Version;
   * struct {
   *   uint64 tree_size;
   *   opaque root_hash&lt;0..128&gt;;
   *   uint64 timestamp_nanos;
   *   uint64 revision;
   *   opaque metadata&lt;0..65535&gt;;
   * } LogRootV1;
   * struct {
   *   Version version;
   *   select(version) {
   *     case v1: LogRootV1;
   *   }
   * } LogRoot;
   * A serialized v1 log root will therefore be laid out as:
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
   * | ver=1 |          tree_size            |len|    root_hash      |
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   * |        timestamp_nanos        |      revision                 |
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   * +---+---+---+---+---+-....---+
   * |  len  |    metadata        |
   * +---+---+---+---+---+-....---+
   * (with all integers encoded big-endian).
   * </pre>
   *
   * <code>bytes log_root = 8;</code>
   * @param value The logRoot to set.
   */
  private void setLogRoot(com.google.protobuf.ByteString value) {
    value.getClass();
  
    logRoot_ = value;
  }
  /**
   * <pre>
   * log_root holds the TLS-serialization of the following structure (described
   * in RFC5246 notation): Clients should validate log_root_signature with
   * VerifySignedLogRoot before deserializing log_root.
   * enum { v1(1), (65535)} Version;
   * struct {
   *   uint64 tree_size;
   *   opaque root_hash&lt;0..128&gt;;
   *   uint64 timestamp_nanos;
   *   uint64 revision;
   *   opaque metadata&lt;0..65535&gt;;
   * } LogRootV1;
   * struct {
   *   Version version;
   *   select(version) {
   *     case v1: LogRootV1;
   *   }
   * } LogRoot;
   * A serialized v1 log root will therefore be laid out as:
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
   * | ver=1 |          tree_size            |len|    root_hash      |
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   * |        timestamp_nanos        |      revision                 |
   * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   * +---+---+---+---+---+-....---+
   * |  len  |    metadata        |
   * +---+---+---+---+---+-....---+
   * (with all integers encoded big-endian).
   * </pre>
   *
   * <code>bytes log_root = 8;</code>
   */
  private void clearLogRoot() {
    
    logRoot_ = getDefaultInstance().getLogRoot();
  }

  public static final int LOG_ROOT_SIGNATURE_FIELD_NUMBER = 9;
  private com.google.protobuf.ByteString logRootSignature_;
  /**
   * <pre>
   * log_root_signature is the raw signature over log_root.
   * </pre>
   *
   * <code>bytes log_root_signature = 9;</code>
   * @return The logRootSignature.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getLogRootSignature() {
    return logRootSignature_;
  }
  /**
   * <pre>
   * log_root_signature is the raw signature over log_root.
   * </pre>
   *
   * <code>bytes log_root_signature = 9;</code>
   * @param value The logRootSignature to set.
   */
  private void setLogRootSignature(com.google.protobuf.ByteString value) {
    value.getClass();
  
    logRootSignature_ = value;
  }
  /**
   * <pre>
   * log_root_signature is the raw signature over log_root.
   * </pre>
   *
   * <code>bytes log_root_signature = 9;</code>
   */
  private void clearLogRootSignature() {
    
    logRootSignature_ = getDefaultInstance().getLogRootSignature();
  }

  public static google.trillian.proto.SignedLogRoot parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.trillian.proto.SignedLogRoot parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.trillian.proto.SignedLogRoot parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.trillian.proto.SignedLogRoot parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.trillian.proto.SignedLogRoot prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * SignedLogRoot represents a commitment by a Log to a particular tree.
   * </pre>
   *
   * Protobuf type {@code trillian.SignedLogRoot}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.trillian.proto.SignedLogRoot, Builder> implements
      // @@protoc_insertion_point(builder_implements:trillian.SignedLogRoot)
      google.trillian.proto.SignedLogRootOrBuilder {
    // Construct using google.trillian.proto.SignedLogRoot.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * key_hint is a hint to identify the public key for signature verification.
     * key_hint is not authenticated and may be incorrect or missing, in which
     * case all known public keys may be used to verify the signature.
     * When directly communicating with a Trillian gRPC server, the key_hint will
     * typically contain the LogID encoded as a big-endian 64-bit integer;
     * however, in other contexts the key_hint is likely to have different
     * contents (e.g. it could be a GUID, a URL + TreeID, or it could be
     * derived from the public key itself).
     * </pre>
     *
     * <code>bytes key_hint = 7;</code>
     * @return The keyHint.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKeyHint() {
      return instance.getKeyHint();
    }
    /**
     * <pre>
     * key_hint is a hint to identify the public key for signature verification.
     * key_hint is not authenticated and may be incorrect or missing, in which
     * case all known public keys may be used to verify the signature.
     * When directly communicating with a Trillian gRPC server, the key_hint will
     * typically contain the LogID encoded as a big-endian 64-bit integer;
     * however, in other contexts the key_hint is likely to have different
     * contents (e.g. it could be a GUID, a URL + TreeID, or it could be
     * derived from the public key itself).
     * </pre>
     *
     * <code>bytes key_hint = 7;</code>
     * @param value The keyHint to set.
     * @return This builder for chaining.
     */
    public Builder setKeyHint(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setKeyHint(value);
      return this;
    }
    /**
     * <pre>
     * key_hint is a hint to identify the public key for signature verification.
     * key_hint is not authenticated and may be incorrect or missing, in which
     * case all known public keys may be used to verify the signature.
     * When directly communicating with a Trillian gRPC server, the key_hint will
     * typically contain the LogID encoded as a big-endian 64-bit integer;
     * however, in other contexts the key_hint is likely to have different
     * contents (e.g. it could be a GUID, a URL + TreeID, or it could be
     * derived from the public key itself).
     * </pre>
     *
     * <code>bytes key_hint = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyHint() {
      copyOnWrite();
      instance.clearKeyHint();
      return this;
    }

    /**
     * <pre>
     * log_root holds the TLS-serialization of the following structure (described
     * in RFC5246 notation): Clients should validate log_root_signature with
     * VerifySignedLogRoot before deserializing log_root.
     * enum { v1(1), (65535)} Version;
     * struct {
     *   uint64 tree_size;
     *   opaque root_hash&lt;0..128&gt;;
     *   uint64 timestamp_nanos;
     *   uint64 revision;
     *   opaque metadata&lt;0..65535&gt;;
     * } LogRootV1;
     * struct {
     *   Version version;
     *   select(version) {
     *     case v1: LogRootV1;
     *   }
     * } LogRoot;
     * A serialized v1 log root will therefore be laid out as:
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
     * | ver=1 |          tree_size            |len|    root_hash      |
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
     * |        timestamp_nanos        |      revision                 |
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
     * +---+---+---+---+---+-....---+
     * |  len  |    metadata        |
     * +---+---+---+---+---+-....---+
     * (with all integers encoded big-endian).
     * </pre>
     *
     * <code>bytes log_root = 8;</code>
     * @return The logRoot.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getLogRoot() {
      return instance.getLogRoot();
    }
    /**
     * <pre>
     * log_root holds the TLS-serialization of the following structure (described
     * in RFC5246 notation): Clients should validate log_root_signature with
     * VerifySignedLogRoot before deserializing log_root.
     * enum { v1(1), (65535)} Version;
     * struct {
     *   uint64 tree_size;
     *   opaque root_hash&lt;0..128&gt;;
     *   uint64 timestamp_nanos;
     *   uint64 revision;
     *   opaque metadata&lt;0..65535&gt;;
     * } LogRootV1;
     * struct {
     *   Version version;
     *   select(version) {
     *     case v1: LogRootV1;
     *   }
     * } LogRoot;
     * A serialized v1 log root will therefore be laid out as:
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
     * | ver=1 |          tree_size            |len|    root_hash      |
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
     * |        timestamp_nanos        |      revision                 |
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
     * +---+---+---+---+---+-....---+
     * |  len  |    metadata        |
     * +---+---+---+---+---+-....---+
     * (with all integers encoded big-endian).
     * </pre>
     *
     * <code>bytes log_root = 8;</code>
     * @param value The logRoot to set.
     * @return This builder for chaining.
     */
    public Builder setLogRoot(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLogRoot(value);
      return this;
    }
    /**
     * <pre>
     * log_root holds the TLS-serialization of the following structure (described
     * in RFC5246 notation): Clients should validate log_root_signature with
     * VerifySignedLogRoot before deserializing log_root.
     * enum { v1(1), (65535)} Version;
     * struct {
     *   uint64 tree_size;
     *   opaque root_hash&lt;0..128&gt;;
     *   uint64 timestamp_nanos;
     *   uint64 revision;
     *   opaque metadata&lt;0..65535&gt;;
     * } LogRootV1;
     * struct {
     *   Version version;
     *   select(version) {
     *     case v1: LogRootV1;
     *   }
     * } LogRoot;
     * A serialized v1 log root will therefore be laid out as:
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
     * | ver=1 |          tree_size            |len|    root_hash      |
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+-....--+
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
     * |        timestamp_nanos        |      revision                 |
     * +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
     * +---+---+---+---+---+-....---+
     * |  len  |    metadata        |
     * +---+---+---+---+---+-....---+
     * (with all integers encoded big-endian).
     * </pre>
     *
     * <code>bytes log_root = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearLogRoot() {
      copyOnWrite();
      instance.clearLogRoot();
      return this;
    }

    /**
     * <pre>
     * log_root_signature is the raw signature over log_root.
     * </pre>
     *
     * <code>bytes log_root_signature = 9;</code>
     * @return The logRootSignature.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getLogRootSignature() {
      return instance.getLogRootSignature();
    }
    /**
     * <pre>
     * log_root_signature is the raw signature over log_root.
     * </pre>
     *
     * <code>bytes log_root_signature = 9;</code>
     * @param value The logRootSignature to set.
     * @return This builder for chaining.
     */
    public Builder setLogRootSignature(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLogRootSignature(value);
      return this;
    }
    /**
     * <pre>
     * log_root_signature is the raw signature over log_root.
     * </pre>
     *
     * <code>bytes log_root_signature = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearLogRootSignature() {
      copyOnWrite();
      instance.clearLogRootSignature();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:trillian.SignedLogRoot)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.trillian.proto.SignedLogRoot();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "keyHint_",
            "logRoot_",
            "logRootSignature_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0007\t\u0003\u0000\u0000\u0000\u0007\n\b\n\t\n";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.trillian.proto.SignedLogRoot> parser = PARSER;
        if (parser == null) {
          synchronized (google.trillian.proto.SignedLogRoot.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.trillian.proto.SignedLogRoot>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:trillian.SignedLogRoot)
  private static final google.trillian.proto.SignedLogRoot DEFAULT_INSTANCE;
  static {
    SignedLogRoot defaultInstance = new SignedLogRoot();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      SignedLogRoot.class, defaultInstance);
  }

  public static google.trillian.proto.SignedLogRoot getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SignedLogRoot> PARSER;

  public static com.google.protobuf.Parser<SignedLogRoot> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

