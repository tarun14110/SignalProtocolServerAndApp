// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_map_api.proto

package google.trillian.proto;

public interface MapLeafInclusionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:trillian.MapLeafInclusion)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <code>.trillian.MapLeaf leaf = 1;</code>
   * @return Whether the leaf field is set.
   */
  boolean hasLeaf();
  /**
   * <code>.trillian.MapLeaf leaf = 1;</code>
   * @return The leaf.
   */
  google.trillian.proto.MapLeaf getLeaf();

  /**
   * <pre>
   * inclusion holds the inclusion proof for this leaf in the map root. It
   * holds one entry for each level of the tree; combining each of these in
   * turn with the leaf's hash (according to the tree's hash strategy)
   * reproduces the root hash.  A nil entry for a particular level indicates
   * that the node in question has an empty subtree beneath it (and so its
   * associated hash value is hasher.HashEmpty(index, height) rather than
   * hasher.HashChildren(l_hash, r_hash)).
   * </pre>
   *
   * <code>repeated bytes inclusion = 2;</code>
   * @return A list containing the inclusion.
   */
  java.util.List<com.google.protobuf.ByteString> getInclusionList();
  /**
   * <pre>
   * inclusion holds the inclusion proof for this leaf in the map root. It
   * holds one entry for each level of the tree; combining each of these in
   * turn with the leaf's hash (according to the tree's hash strategy)
   * reproduces the root hash.  A nil entry for a particular level indicates
   * that the node in question has an empty subtree beneath it (and so its
   * associated hash value is hasher.HashEmpty(index, height) rather than
   * hasher.HashChildren(l_hash, r_hash)).
   * </pre>
   *
   * <code>repeated bytes inclusion = 2;</code>
   * @return The count of inclusion.
   */
  int getInclusionCount();
  /**
   * <pre>
   * inclusion holds the inclusion proof for this leaf in the map root. It
   * holds one entry for each level of the tree; combining each of these in
   * turn with the leaf's hash (according to the tree's hash strategy)
   * reproduces the root hash.  A nil entry for a particular level indicates
   * that the node in question has an empty subtree beneath it (and so its
   * associated hash value is hasher.HashEmpty(index, height) rather than
   * hasher.HashChildren(l_hash, r_hash)).
   * </pre>
   *
   * <code>repeated bytes inclusion = 2;</code>
   * @param index The index of the element to return.
   * @return The inclusion at the given index.
   */
  com.google.protobuf.ByteString getInclusion(int index);
}
