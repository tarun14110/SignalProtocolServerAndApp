// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian.proto

package google.trillian.proto;

public interface TreeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:trillian.Tree)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * ID of the tree.
   * Readonly.
   * </pre>
   *
   * <code>int64 tree_id = 1;</code>
   * @return The treeId.
   */
  long getTreeId();

  /**
   * <pre>
   * State of the tree.
   * Trees are ACTIVE after creation. At any point the tree may transition
   * between ACTIVE, DRAINING and FROZEN states.
   * </pre>
   *
   * <code>.trillian.TreeState tree_state = 2;</code>
   * @return The enum numeric value on the wire for treeState.
   */
  int getTreeStateValue();
  /**
   * <pre>
   * State of the tree.
   * Trees are ACTIVE after creation. At any point the tree may transition
   * between ACTIVE, DRAINING and FROZEN states.
   * </pre>
   *
   * <code>.trillian.TreeState tree_state = 2;</code>
   * @return The treeState.
   */
  google.trillian.proto.TreeState getTreeState();

  /**
   * <pre>
   * Type of the tree.
   * Readonly after Tree creation. Exception: Can be switched from
   * PREORDERED_LOG to LOG if the Tree is and remains in the FROZEN state.
   * </pre>
   *
   * <code>.trillian.TreeType tree_type = 3;</code>
   * @return The enum numeric value on the wire for treeType.
   */
  int getTreeTypeValue();
  /**
   * <pre>
   * Type of the tree.
   * Readonly after Tree creation. Exception: Can be switched from
   * PREORDERED_LOG to LOG if the Tree is and remains in the FROZEN state.
   * </pre>
   *
   * <code>.trillian.TreeType tree_type = 3;</code>
   * @return The treeType.
   */
  google.trillian.proto.TreeType getTreeType();

  /**
   * <pre>
   * Hash strategy to be used by the tree.
   * Readonly.
   * </pre>
   *
   * <code>.trillian.HashStrategy hash_strategy = 4;</code>
   * @return The enum numeric value on the wire for hashStrategy.
   */
  int getHashStrategyValue();
  /**
   * <pre>
   * Hash strategy to be used by the tree.
   * Readonly.
   * </pre>
   *
   * <code>.trillian.HashStrategy hash_strategy = 4;</code>
   * @return The hashStrategy.
   */
  google.trillian.proto.HashStrategy getHashStrategy();

  /**
   * <pre>
   * Hash algorithm to be used by the tree.
   * Readonly.
   * </pre>
   *
   * <code>.sigpb.DigitallySigned.HashAlgorithm hash_algorithm = 5;</code>
   * @return The enum numeric value on the wire for hashAlgorithm.
   */
  int getHashAlgorithmValue();
  /**
   * <pre>
   * Hash algorithm to be used by the tree.
   * Readonly.
   * </pre>
   *
   * <code>.sigpb.DigitallySigned.HashAlgorithm hash_algorithm = 5;</code>
   * @return The hashAlgorithm.
   */
  google.trillian.sigpb.Sigpb.DigitallySigned.HashAlgorithm getHashAlgorithm();

  /**
   * <pre>
   * Signature algorithm to be used by the tree.
   * Readonly.
   * </pre>
   *
   * <code>.sigpb.DigitallySigned.SignatureAlgorithm signature_algorithm = 6;</code>
   * @return The enum numeric value on the wire for signatureAlgorithm.
   */
  int getSignatureAlgorithmValue();
  /**
   * <pre>
   * Signature algorithm to be used by the tree.
   * Readonly.
   * </pre>
   *
   * <code>.sigpb.DigitallySigned.SignatureAlgorithm signature_algorithm = 6;</code>
   * @return The signatureAlgorithm.
   */
  google.trillian.sigpb.Sigpb.DigitallySigned.SignatureAlgorithm getSignatureAlgorithm();

  /**
   * <pre>
   * Display name of the tree.
   * Optional.
   * </pre>
   *
   * <code>string display_name = 8;</code>
   * @return The displayName.
   */
  java.lang.String getDisplayName();
  /**
   * <pre>
   * Display name of the tree.
   * Optional.
   * </pre>
   *
   * <code>string display_name = 8;</code>
   * @return The bytes for displayName.
   */
  com.google.protobuf.ByteString
      getDisplayNameBytes();

  /**
   * <pre>
   * Description of the tree,
   * Optional.
   * </pre>
   *
   * <code>string description = 9;</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * Description of the tree,
   * Optional.
   * </pre>
   *
   * <code>string description = 9;</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * Identifies the private key used for signing tree heads and entry
   * timestamps.
   * This can be any type of message to accommodate different key management
   * systems, e.g. PEM files, HSMs, etc.
   * Private keys are write-only: they're never returned by RPCs.
   * The private_key message can be changed after a tree is created, but the
   * underlying key must remain the same - this is to enable migrating a key
   * from one provider to another.
   * </pre>
   *
   * <code>.google.protobuf.Any private_key = 12;</code>
   * @return Whether the privateKey field is set.
   */
  boolean hasPrivateKey();
  /**
   * <pre>
   * Identifies the private key used for signing tree heads and entry
   * timestamps.
   * This can be any type of message to accommodate different key management
   * systems, e.g. PEM files, HSMs, etc.
   * Private keys are write-only: they're never returned by RPCs.
   * The private_key message can be changed after a tree is created, but the
   * underlying key must remain the same - this is to enable migrating a key
   * from one provider to another.
   * </pre>
   *
   * <code>.google.protobuf.Any private_key = 12;</code>
   * @return The privateKey.
   */
  com.google.protobuf.Any getPrivateKey();

  /**
   * <pre>
   * Storage-specific settings.
   * Varies according to the storage implementation backing Trillian.
   * </pre>
   *
   * <code>.google.protobuf.Any storage_settings = 13;</code>
   * @return Whether the storageSettings field is set.
   */
  boolean hasStorageSettings();
  /**
   * <pre>
   * Storage-specific settings.
   * Varies according to the storage implementation backing Trillian.
   * </pre>
   *
   * <code>.google.protobuf.Any storage_settings = 13;</code>
   * @return The storageSettings.
   */
  com.google.protobuf.Any getStorageSettings();

  /**
   * <pre>
   * The public key used for verifying tree heads and entry timestamps.
   * Readonly.
   * </pre>
   *
   * <code>.keyspb.PublicKey public_key = 14;</code>
   * @return Whether the publicKey field is set.
   */
  boolean hasPublicKey();
  /**
   * <pre>
   * The public key used for verifying tree heads and entry timestamps.
   * Readonly.
   * </pre>
   *
   * <code>.keyspb.PublicKey public_key = 14;</code>
   * @return The publicKey.
   */
  google.trillian.keyspb.Keyspb.PublicKey getPublicKey();

  /**
   * <pre>
   * Interval after which a new signed root is produced even if there have been
   * no submission.  If zero, this behavior is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_root_duration = 15;</code>
   * @return Whether the maxRootDuration field is set.
   */
  boolean hasMaxRootDuration();
  /**
   * <pre>
   * Interval after which a new signed root is produced even if there have been
   * no submission.  If zero, this behavior is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_root_duration = 15;</code>
   * @return The maxRootDuration.
   */
  com.google.protobuf.Duration getMaxRootDuration();

  /**
   * <pre>
   * Time of tree creation.
   * Readonly.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 16;</code>
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();
  /**
   * <pre>
   * Time of tree creation.
   * Readonly.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 16;</code>
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();

  /**
   * <pre>
   * Time of last tree update.
   * Readonly (automatically assigned on updates).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 17;</code>
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();
  /**
   * <pre>
   * Time of last tree update.
   * Readonly (automatically assigned on updates).
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 17;</code>
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();

  /**
   * <pre>
   * If true, the tree has been deleted.
   * Deleted trees may be undeleted during a certain time window, after which
   * they're permanently deleted (and unrecoverable).
   * Readonly.
   * </pre>
   *
   * <code>bool deleted = 19;</code>
   * @return The deleted.
   */
  boolean getDeleted();

  /**
   * <pre>
   * Time of tree deletion, if any.
   * Readonly.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp delete_time = 20;</code>
   * @return Whether the deleteTime field is set.
   */
  boolean hasDeleteTime();
  /**
   * <pre>
   * Time of tree deletion, if any.
   * Readonly.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp delete_time = 20;</code>
   * @return The deleteTime.
   */
  com.google.protobuf.Timestamp getDeleteTime();
}
