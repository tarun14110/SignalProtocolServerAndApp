// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skylog/storage/gcp/gcppb/gcp.proto

package gcppb;

public final class Gcp {
  private Gcp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BuildJobOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gcppb.BuildJob)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The tree ID to build a subtree of.
     * </pre>
     *
     * <code>int64 tree_id = 1;</code>
     */
    long getTreeId();

    /**
     * <pre>
     * The beginning of the leaves range (inclusive).
     * </pre>
     *
     * <code>uint64 begin = 2;</code>
     */
    long getBegin();

    /**
     * <pre>
     * The ending of the leaves range (exclusive).
     * </pre>
     *
     * <code>uint64 end = 3;</code>
     */
    long getEnd();

    /**
     * <pre>
     * The tree sharding scheme that the build worker should use. Since builders
     * are stateless it is more efficient to pass it in from the master rather
     * than fetch it from storage on each job invocation.
     * </pre>
     *
     * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
     */
    boolean hasTreeSharding();
    /**
     * <pre>
     * The tree sharding scheme that the build worker should use. Since builders
     * are stateless it is more efficient to pass it in from the master rather
     * than fetch it from storage on each job invocation.
     * </pre>
     *
     * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
     */
    gcppb.Gcp.TreeSharding getTreeSharding();
    /**
     * <pre>
     * The tree sharding scheme that the build worker should use. Since builders
     * are stateless it is more efficient to pass it in from the master rather
     * than fetch it from storage on each job invocation.
     * </pre>
     *
     * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
     */
    gcppb.Gcp.TreeShardingOrBuilder getTreeShardingOrBuilder();

    /**
     * <pre>
     * The sequence sharding scheme that the build worker should use. It is
     * provided for the same reason as the tree sharding field.
     * </pre>
     *
     * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
     */
    boolean hasSeqSharding();
    /**
     * <pre>
     * The sequence sharding scheme that the build worker should use. It is
     * provided for the same reason as the tree sharding field.
     * </pre>
     *
     * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
     */
    gcppb.Gcp.SequenceSharding getSeqSharding();
    /**
     * <pre>
     * The sequence sharding scheme that the build worker should use. It is
     * provided for the same reason as the tree sharding field.
     * </pre>
     *
     * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
     */
    gcppb.Gcp.SequenceShardingOrBuilder getSeqShardingOrBuilder();
  }
  /**
   * <pre>
   * BuildJob is a Merke tree building job. It instructs workers to build a
   * subtree covering leaves of the [begin, end) range for the specified tree.
   * </pre>
   *
   * Protobuf type {@code gcppb.BuildJob}
   */
  public  static final class BuildJob extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gcppb.BuildJob)
      BuildJobOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BuildJob.newBuilder() to construct.
    private BuildJob(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BuildJob() {
      treeId_ = 0L;
      begin_ = 0L;
      end_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BuildJob(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              treeId_ = input.readInt64();
              break;
            }
            case 16: {

              begin_ = input.readUInt64();
              break;
            }
            case 24: {

              end_ = input.readUInt64();
              break;
            }
            case 34: {
              gcppb.Gcp.TreeSharding.Builder subBuilder = null;
              if (treeSharding_ != null) {
                subBuilder = treeSharding_.toBuilder();
              }
              treeSharding_ = input.readMessage(gcppb.Gcp.TreeSharding.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(treeSharding_);
                treeSharding_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              gcppb.Gcp.SequenceSharding.Builder subBuilder = null;
              if (seqSharding_ != null) {
                subBuilder = seqSharding_.toBuilder();
              }
              seqSharding_ = input.readMessage(gcppb.Gcp.SequenceSharding.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(seqSharding_);
                seqSharding_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gcppb.Gcp.internal_static_gcppb_BuildJob_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gcppb.Gcp.internal_static_gcppb_BuildJob_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gcppb.Gcp.BuildJob.class, gcppb.Gcp.BuildJob.Builder.class);
    }

    public static final int TREE_ID_FIELD_NUMBER = 1;
    private long treeId_;
    /**
     * <pre>
     * The tree ID to build a subtree of.
     * </pre>
     *
     * <code>int64 tree_id = 1;</code>
     */
    public long getTreeId() {
      return treeId_;
    }

    public static final int BEGIN_FIELD_NUMBER = 2;
    private long begin_;
    /**
     * <pre>
     * The beginning of the leaves range (inclusive).
     * </pre>
     *
     * <code>uint64 begin = 2;</code>
     */
    public long getBegin() {
      return begin_;
    }

    public static final int END_FIELD_NUMBER = 3;
    private long end_;
    /**
     * <pre>
     * The ending of the leaves range (exclusive).
     * </pre>
     *
     * <code>uint64 end = 3;</code>
     */
    public long getEnd() {
      return end_;
    }

    public static final int TREE_SHARDING_FIELD_NUMBER = 4;
    private gcppb.Gcp.TreeSharding treeSharding_;
    /**
     * <pre>
     * The tree sharding scheme that the build worker should use. Since builders
     * are stateless it is more efficient to pass it in from the master rather
     * than fetch it from storage on each job invocation.
     * </pre>
     *
     * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
     */
    public boolean hasTreeSharding() {
      return treeSharding_ != null;
    }
    /**
     * <pre>
     * The tree sharding scheme that the build worker should use. Since builders
     * are stateless it is more efficient to pass it in from the master rather
     * than fetch it from storage on each job invocation.
     * </pre>
     *
     * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
     */
    public gcppb.Gcp.TreeSharding getTreeSharding() {
      return treeSharding_ == null ? gcppb.Gcp.TreeSharding.getDefaultInstance() : treeSharding_;
    }
    /**
     * <pre>
     * The tree sharding scheme that the build worker should use. Since builders
     * are stateless it is more efficient to pass it in from the master rather
     * than fetch it from storage on each job invocation.
     * </pre>
     *
     * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
     */
    public gcppb.Gcp.TreeShardingOrBuilder getTreeShardingOrBuilder() {
      return getTreeSharding();
    }

    public static final int SEQ_SHARDING_FIELD_NUMBER = 5;
    private gcppb.Gcp.SequenceSharding seqSharding_;
    /**
     * <pre>
     * The sequence sharding scheme that the build worker should use. It is
     * provided for the same reason as the tree sharding field.
     * </pre>
     *
     * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
     */
    public boolean hasSeqSharding() {
      return seqSharding_ != null;
    }
    /**
     * <pre>
     * The sequence sharding scheme that the build worker should use. It is
     * provided for the same reason as the tree sharding field.
     * </pre>
     *
     * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
     */
    public gcppb.Gcp.SequenceSharding getSeqSharding() {
      return seqSharding_ == null ? gcppb.Gcp.SequenceSharding.getDefaultInstance() : seqSharding_;
    }
    /**
     * <pre>
     * The sequence sharding scheme that the build worker should use. It is
     * provided for the same reason as the tree sharding field.
     * </pre>
     *
     * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
     */
    public gcppb.Gcp.SequenceShardingOrBuilder getSeqShardingOrBuilder() {
      return getSeqSharding();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (treeId_ != 0L) {
        output.writeInt64(1, treeId_);
      }
      if (begin_ != 0L) {
        output.writeUInt64(2, begin_);
      }
      if (end_ != 0L) {
        output.writeUInt64(3, end_);
      }
      if (treeSharding_ != null) {
        output.writeMessage(4, getTreeSharding());
      }
      if (seqSharding_ != null) {
        output.writeMessage(5, getSeqSharding());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (treeId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, treeId_);
      }
      if (begin_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, begin_);
      }
      if (end_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, end_);
      }
      if (treeSharding_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getTreeSharding());
      }
      if (seqSharding_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSeqSharding());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gcppb.Gcp.BuildJob)) {
        return super.equals(obj);
      }
      gcppb.Gcp.BuildJob other = (gcppb.Gcp.BuildJob) obj;

      boolean result = true;
      result = result && (getTreeId()
          == other.getTreeId());
      result = result && (getBegin()
          == other.getBegin());
      result = result && (getEnd()
          == other.getEnd());
      result = result && (hasTreeSharding() == other.hasTreeSharding());
      if (hasTreeSharding()) {
        result = result && getTreeSharding()
            .equals(other.getTreeSharding());
      }
      result = result && (hasSeqSharding() == other.hasSeqSharding());
      if (hasSeqSharding()) {
        result = result && getSeqSharding()
            .equals(other.getSeqSharding());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TREE_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTreeId());
      hash = (37 * hash) + BEGIN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBegin());
      hash = (37 * hash) + END_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getEnd());
      if (hasTreeSharding()) {
        hash = (37 * hash) + TREE_SHARDING_FIELD_NUMBER;
        hash = (53 * hash) + getTreeSharding().hashCode();
      }
      if (hasSeqSharding()) {
        hash = (37 * hash) + SEQ_SHARDING_FIELD_NUMBER;
        hash = (53 * hash) + getSeqSharding().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gcppb.Gcp.BuildJob parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.BuildJob parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.BuildJob parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gcppb.Gcp.BuildJob parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.BuildJob parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.BuildJob parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gcppb.Gcp.BuildJob prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BuildJob is a Merke tree building job. It instructs workers to build a
     * subtree covering leaves of the [begin, end) range for the specified tree.
     * </pre>
     *
     * Protobuf type {@code gcppb.BuildJob}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gcppb.BuildJob)
        gcppb.Gcp.BuildJobOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gcppb.Gcp.internal_static_gcppb_BuildJob_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gcppb.Gcp.internal_static_gcppb_BuildJob_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gcppb.Gcp.BuildJob.class, gcppb.Gcp.BuildJob.Builder.class);
      }

      // Construct using gcppb.Gcp.BuildJob.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        treeId_ = 0L;

        begin_ = 0L;

        end_ = 0L;

        if (treeShardingBuilder_ == null) {
          treeSharding_ = null;
        } else {
          treeSharding_ = null;
          treeShardingBuilder_ = null;
        }
        if (seqShardingBuilder_ == null) {
          seqSharding_ = null;
        } else {
          seqSharding_ = null;
          seqShardingBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gcppb.Gcp.internal_static_gcppb_BuildJob_descriptor;
      }

      public gcppb.Gcp.BuildJob getDefaultInstanceForType() {
        return gcppb.Gcp.BuildJob.getDefaultInstance();
      }

      public gcppb.Gcp.BuildJob build() {
        gcppb.Gcp.BuildJob result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gcppb.Gcp.BuildJob buildPartial() {
        gcppb.Gcp.BuildJob result = new gcppb.Gcp.BuildJob(this);
        result.treeId_ = treeId_;
        result.begin_ = begin_;
        result.end_ = end_;
        if (treeShardingBuilder_ == null) {
          result.treeSharding_ = treeSharding_;
        } else {
          result.treeSharding_ = treeShardingBuilder_.build();
        }
        if (seqShardingBuilder_ == null) {
          result.seqSharding_ = seqSharding_;
        } else {
          result.seqSharding_ = seqShardingBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gcppb.Gcp.BuildJob) {
          return mergeFrom((gcppb.Gcp.BuildJob)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gcppb.Gcp.BuildJob other) {
        if (other == gcppb.Gcp.BuildJob.getDefaultInstance()) return this;
        if (other.getTreeId() != 0L) {
          setTreeId(other.getTreeId());
        }
        if (other.getBegin() != 0L) {
          setBegin(other.getBegin());
        }
        if (other.getEnd() != 0L) {
          setEnd(other.getEnd());
        }
        if (other.hasTreeSharding()) {
          mergeTreeSharding(other.getTreeSharding());
        }
        if (other.hasSeqSharding()) {
          mergeSeqSharding(other.getSeqSharding());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gcppb.Gcp.BuildJob parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gcppb.Gcp.BuildJob) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long treeId_ ;
      /**
       * <pre>
       * The tree ID to build a subtree of.
       * </pre>
       *
       * <code>int64 tree_id = 1;</code>
       */
      public long getTreeId() {
        return treeId_;
      }
      /**
       * <pre>
       * The tree ID to build a subtree of.
       * </pre>
       *
       * <code>int64 tree_id = 1;</code>
       */
      public Builder setTreeId(long value) {
        
        treeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The tree ID to build a subtree of.
       * </pre>
       *
       * <code>int64 tree_id = 1;</code>
       */
      public Builder clearTreeId() {
        
        treeId_ = 0L;
        onChanged();
        return this;
      }

      private long begin_ ;
      /**
       * <pre>
       * The beginning of the leaves range (inclusive).
       * </pre>
       *
       * <code>uint64 begin = 2;</code>
       */
      public long getBegin() {
        return begin_;
      }
      /**
       * <pre>
       * The beginning of the leaves range (inclusive).
       * </pre>
       *
       * <code>uint64 begin = 2;</code>
       */
      public Builder setBegin(long value) {
        
        begin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The beginning of the leaves range (inclusive).
       * </pre>
       *
       * <code>uint64 begin = 2;</code>
       */
      public Builder clearBegin() {
        
        begin_ = 0L;
        onChanged();
        return this;
      }

      private long end_ ;
      /**
       * <pre>
       * The ending of the leaves range (exclusive).
       * </pre>
       *
       * <code>uint64 end = 3;</code>
       */
      public long getEnd() {
        return end_;
      }
      /**
       * <pre>
       * The ending of the leaves range (exclusive).
       * </pre>
       *
       * <code>uint64 end = 3;</code>
       */
      public Builder setEnd(long value) {
        
        end_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ending of the leaves range (exclusive).
       * </pre>
       *
       * <code>uint64 end = 3;</code>
       */
      public Builder clearEnd() {
        
        end_ = 0L;
        onChanged();
        return this;
      }

      private gcppb.Gcp.TreeSharding treeSharding_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gcppb.Gcp.TreeSharding, gcppb.Gcp.TreeSharding.Builder, gcppb.Gcp.TreeShardingOrBuilder> treeShardingBuilder_;
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public boolean hasTreeSharding() {
        return treeShardingBuilder_ != null || treeSharding_ != null;
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public gcppb.Gcp.TreeSharding getTreeSharding() {
        if (treeShardingBuilder_ == null) {
          return treeSharding_ == null ? gcppb.Gcp.TreeSharding.getDefaultInstance() : treeSharding_;
        } else {
          return treeShardingBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public Builder setTreeSharding(gcppb.Gcp.TreeSharding value) {
        if (treeShardingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          treeSharding_ = value;
          onChanged();
        } else {
          treeShardingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public Builder setTreeSharding(
          gcppb.Gcp.TreeSharding.Builder builderForValue) {
        if (treeShardingBuilder_ == null) {
          treeSharding_ = builderForValue.build();
          onChanged();
        } else {
          treeShardingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public Builder mergeTreeSharding(gcppb.Gcp.TreeSharding value) {
        if (treeShardingBuilder_ == null) {
          if (treeSharding_ != null) {
            treeSharding_ =
              gcppb.Gcp.TreeSharding.newBuilder(treeSharding_).mergeFrom(value).buildPartial();
          } else {
            treeSharding_ = value;
          }
          onChanged();
        } else {
          treeShardingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public Builder clearTreeSharding() {
        if (treeShardingBuilder_ == null) {
          treeSharding_ = null;
          onChanged();
        } else {
          treeSharding_ = null;
          treeShardingBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public gcppb.Gcp.TreeSharding.Builder getTreeShardingBuilder() {
        
        onChanged();
        return getTreeShardingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      public gcppb.Gcp.TreeShardingOrBuilder getTreeShardingOrBuilder() {
        if (treeShardingBuilder_ != null) {
          return treeShardingBuilder_.getMessageOrBuilder();
        } else {
          return treeSharding_ == null ?
              gcppb.Gcp.TreeSharding.getDefaultInstance() : treeSharding_;
        }
      }
      /**
       * <pre>
       * The tree sharding scheme that the build worker should use. Since builders
       * are stateless it is more efficient to pass it in from the master rather
       * than fetch it from storage on each job invocation.
       * </pre>
       *
       * <code>.gcppb.TreeSharding tree_sharding = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gcppb.Gcp.TreeSharding, gcppb.Gcp.TreeSharding.Builder, gcppb.Gcp.TreeShardingOrBuilder> 
          getTreeShardingFieldBuilder() {
        if (treeShardingBuilder_ == null) {
          treeShardingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gcppb.Gcp.TreeSharding, gcppb.Gcp.TreeSharding.Builder, gcppb.Gcp.TreeShardingOrBuilder>(
                  getTreeSharding(),
                  getParentForChildren(),
                  isClean());
          treeSharding_ = null;
        }
        return treeShardingBuilder_;
      }

      private gcppb.Gcp.SequenceSharding seqSharding_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gcppb.Gcp.SequenceSharding, gcppb.Gcp.SequenceSharding.Builder, gcppb.Gcp.SequenceShardingOrBuilder> seqShardingBuilder_;
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public boolean hasSeqSharding() {
        return seqShardingBuilder_ != null || seqSharding_ != null;
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public gcppb.Gcp.SequenceSharding getSeqSharding() {
        if (seqShardingBuilder_ == null) {
          return seqSharding_ == null ? gcppb.Gcp.SequenceSharding.getDefaultInstance() : seqSharding_;
        } else {
          return seqShardingBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public Builder setSeqSharding(gcppb.Gcp.SequenceSharding value) {
        if (seqShardingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          seqSharding_ = value;
          onChanged();
        } else {
          seqShardingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public Builder setSeqSharding(
          gcppb.Gcp.SequenceSharding.Builder builderForValue) {
        if (seqShardingBuilder_ == null) {
          seqSharding_ = builderForValue.build();
          onChanged();
        } else {
          seqShardingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public Builder mergeSeqSharding(gcppb.Gcp.SequenceSharding value) {
        if (seqShardingBuilder_ == null) {
          if (seqSharding_ != null) {
            seqSharding_ =
              gcppb.Gcp.SequenceSharding.newBuilder(seqSharding_).mergeFrom(value).buildPartial();
          } else {
            seqSharding_ = value;
          }
          onChanged();
        } else {
          seqShardingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public Builder clearSeqSharding() {
        if (seqShardingBuilder_ == null) {
          seqSharding_ = null;
          onChanged();
        } else {
          seqSharding_ = null;
          seqShardingBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public gcppb.Gcp.SequenceSharding.Builder getSeqShardingBuilder() {
        
        onChanged();
        return getSeqShardingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      public gcppb.Gcp.SequenceShardingOrBuilder getSeqShardingOrBuilder() {
        if (seqShardingBuilder_ != null) {
          return seqShardingBuilder_.getMessageOrBuilder();
        } else {
          return seqSharding_ == null ?
              gcppb.Gcp.SequenceSharding.getDefaultInstance() : seqSharding_;
        }
      }
      /**
       * <pre>
       * The sequence sharding scheme that the build worker should use. It is
       * provided for the same reason as the tree sharding field.
       * </pre>
       *
       * <code>.gcppb.SequenceSharding seq_sharding = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gcppb.Gcp.SequenceSharding, gcppb.Gcp.SequenceSharding.Builder, gcppb.Gcp.SequenceShardingOrBuilder> 
          getSeqShardingFieldBuilder() {
        if (seqShardingBuilder_ == null) {
          seqShardingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gcppb.Gcp.SequenceSharding, gcppb.Gcp.SequenceSharding.Builder, gcppb.Gcp.SequenceShardingOrBuilder>(
                  getSeqSharding(),
                  getParentForChildren(),
                  isClean());
          seqSharding_ = null;
        }
        return seqShardingBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gcppb.BuildJob)
    }

    // @@protoc_insertion_point(class_scope:gcppb.BuildJob)
    private static final gcppb.Gcp.BuildJob DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gcppb.Gcp.BuildJob();
    }

    public static gcppb.Gcp.BuildJob getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BuildJob>
        PARSER = new com.google.protobuf.AbstractParser<BuildJob>() {
      public BuildJob parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildJob(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BuildJob> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BuildJob> getParserForType() {
      return PARSER;
    }

    public gcppb.Gcp.BuildJob getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TreeShardingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gcppb.TreeSharding)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 levels = 1;</code>
     */
    int getLevels();

    /**
     * <code>uint32 shards = 2;</code>
     */
    int getShards();
  }
  /**
   * <pre>
   * TreeSharding describes the tree nodes sharding scheme.
   * The specified number of lower tree levels are split into the specified number
   * of shards, where each shard stores a periodic sub-structure of perfect
   * subtrees. There is one extra shard covering the upper tree levels.
   * See the tree storage comments for more details.
   * </pre>
   *
   * Protobuf type {@code gcppb.TreeSharding}
   */
  public  static final class TreeSharding extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gcppb.TreeSharding)
      TreeShardingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TreeSharding.newBuilder() to construct.
    private TreeSharding(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TreeSharding() {
      levels_ = 0;
      shards_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TreeSharding(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              levels_ = input.readUInt32();
              break;
            }
            case 16: {

              shards_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gcppb.Gcp.internal_static_gcppb_TreeSharding_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gcppb.Gcp.internal_static_gcppb_TreeSharding_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gcppb.Gcp.TreeSharding.class, gcppb.Gcp.TreeSharding.Builder.class);
    }

    public static final int LEVELS_FIELD_NUMBER = 1;
    private int levels_;
    /**
     * <code>uint32 levels = 1;</code>
     */
    public int getLevels() {
      return levels_;
    }

    public static final int SHARDS_FIELD_NUMBER = 2;
    private int shards_;
    /**
     * <code>uint32 shards = 2;</code>
     */
    public int getShards() {
      return shards_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (levels_ != 0) {
        output.writeUInt32(1, levels_);
      }
      if (shards_ != 0) {
        output.writeUInt32(2, shards_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (levels_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, levels_);
      }
      if (shards_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, shards_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gcppb.Gcp.TreeSharding)) {
        return super.equals(obj);
      }
      gcppb.Gcp.TreeSharding other = (gcppb.Gcp.TreeSharding) obj;

      boolean result = true;
      result = result && (getLevels()
          == other.getLevels());
      result = result && (getShards()
          == other.getShards());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LEVELS_FIELD_NUMBER;
      hash = (53 * hash) + getLevels();
      hash = (37 * hash) + SHARDS_FIELD_NUMBER;
      hash = (53 * hash) + getShards();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gcppb.Gcp.TreeSharding parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gcppb.Gcp.TreeSharding parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.TreeSharding parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.TreeSharding parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gcppb.Gcp.TreeSharding prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TreeSharding describes the tree nodes sharding scheme.
     * The specified number of lower tree levels are split into the specified number
     * of shards, where each shard stores a periodic sub-structure of perfect
     * subtrees. There is one extra shard covering the upper tree levels.
     * See the tree storage comments for more details.
     * </pre>
     *
     * Protobuf type {@code gcppb.TreeSharding}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gcppb.TreeSharding)
        gcppb.Gcp.TreeShardingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gcppb.Gcp.internal_static_gcppb_TreeSharding_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gcppb.Gcp.internal_static_gcppb_TreeSharding_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gcppb.Gcp.TreeSharding.class, gcppb.Gcp.TreeSharding.Builder.class);
      }

      // Construct using gcppb.Gcp.TreeSharding.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        levels_ = 0;

        shards_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gcppb.Gcp.internal_static_gcppb_TreeSharding_descriptor;
      }

      public gcppb.Gcp.TreeSharding getDefaultInstanceForType() {
        return gcppb.Gcp.TreeSharding.getDefaultInstance();
      }

      public gcppb.Gcp.TreeSharding build() {
        gcppb.Gcp.TreeSharding result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gcppb.Gcp.TreeSharding buildPartial() {
        gcppb.Gcp.TreeSharding result = new gcppb.Gcp.TreeSharding(this);
        result.levels_ = levels_;
        result.shards_ = shards_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gcppb.Gcp.TreeSharding) {
          return mergeFrom((gcppb.Gcp.TreeSharding)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gcppb.Gcp.TreeSharding other) {
        if (other == gcppb.Gcp.TreeSharding.getDefaultInstance()) return this;
        if (other.getLevels() != 0) {
          setLevels(other.getLevels());
        }
        if (other.getShards() != 0) {
          setShards(other.getShards());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gcppb.Gcp.TreeSharding parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gcppb.Gcp.TreeSharding) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int levels_ ;
      /**
       * <code>uint32 levels = 1;</code>
       */
      public int getLevels() {
        return levels_;
      }
      /**
       * <code>uint32 levels = 1;</code>
       */
      public Builder setLevels(int value) {
        
        levels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 levels = 1;</code>
       */
      public Builder clearLevels() {
        
        levels_ = 0;
        onChanged();
        return this;
      }

      private int shards_ ;
      /**
       * <code>uint32 shards = 2;</code>
       */
      public int getShards() {
        return shards_;
      }
      /**
       * <code>uint32 shards = 2;</code>
       */
      public Builder setShards(int value) {
        
        shards_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shards = 2;</code>
       */
      public Builder clearShards() {
        
        shards_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gcppb.TreeSharding)
    }

    // @@protoc_insertion_point(class_scope:gcppb.TreeSharding)
    private static final gcppb.Gcp.TreeSharding DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gcppb.Gcp.TreeSharding();
    }

    public static gcppb.Gcp.TreeSharding getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TreeSharding>
        PARSER = new com.google.protobuf.AbstractParser<TreeSharding>() {
      public TreeSharding parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TreeSharding(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TreeSharding> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TreeSharding> getParserForType() {
      return PARSER;
    }

    public gcppb.Gcp.TreeSharding getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SequenceShardingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gcppb.SequenceSharding)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 shards = 1;</code>
     */
    int getShards();

    /**
     * <code>uint64 size = 2;</code>
     */
    long getSize();
  }
  /**
   * <pre>
   * SequenceSharding describes the sequenced log entries sharding scheme.
   * The sequence is split into the specified number of shards, where each shard
   * stores a periodic sub-sequence consisting of stripes of the specified size.
   * See the sequence storage comments for more details.
   * </pre>
   *
   * Protobuf type {@code gcppb.SequenceSharding}
   */
  public  static final class SequenceSharding extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gcppb.SequenceSharding)
      SequenceShardingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SequenceSharding.newBuilder() to construct.
    private SequenceSharding(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SequenceSharding() {
      shards_ = 0;
      size_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SequenceSharding(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              shards_ = input.readUInt32();
              break;
            }
            case 16: {

              size_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gcppb.Gcp.internal_static_gcppb_SequenceSharding_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gcppb.Gcp.internal_static_gcppb_SequenceSharding_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gcppb.Gcp.SequenceSharding.class, gcppb.Gcp.SequenceSharding.Builder.class);
    }

    public static final int SHARDS_FIELD_NUMBER = 1;
    private int shards_;
    /**
     * <code>uint32 shards = 1;</code>
     */
    public int getShards() {
      return shards_;
    }

    public static final int SIZE_FIELD_NUMBER = 2;
    private long size_;
    /**
     * <code>uint64 size = 2;</code>
     */
    public long getSize() {
      return size_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (shards_ != 0) {
        output.writeUInt32(1, shards_);
      }
      if (size_ != 0L) {
        output.writeUInt64(2, size_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (shards_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, shards_);
      }
      if (size_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, size_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gcppb.Gcp.SequenceSharding)) {
        return super.equals(obj);
      }
      gcppb.Gcp.SequenceSharding other = (gcppb.Gcp.SequenceSharding) obj;

      boolean result = true;
      result = result && (getShards()
          == other.getShards());
      result = result && (getSize()
          == other.getSize());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SHARDS_FIELD_NUMBER;
      hash = (53 * hash) + getShards();
      hash = (37 * hash) + SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSize());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gcppb.Gcp.SequenceSharding parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gcppb.Gcp.SequenceSharding parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.SequenceSharding parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gcppb.Gcp.SequenceSharding parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gcppb.Gcp.SequenceSharding prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SequenceSharding describes the sequenced log entries sharding scheme.
     * The sequence is split into the specified number of shards, where each shard
     * stores a periodic sub-sequence consisting of stripes of the specified size.
     * See the sequence storage comments for more details.
     * </pre>
     *
     * Protobuf type {@code gcppb.SequenceSharding}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gcppb.SequenceSharding)
        gcppb.Gcp.SequenceShardingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gcppb.Gcp.internal_static_gcppb_SequenceSharding_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gcppb.Gcp.internal_static_gcppb_SequenceSharding_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gcppb.Gcp.SequenceSharding.class, gcppb.Gcp.SequenceSharding.Builder.class);
      }

      // Construct using gcppb.Gcp.SequenceSharding.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        shards_ = 0;

        size_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gcppb.Gcp.internal_static_gcppb_SequenceSharding_descriptor;
      }

      public gcppb.Gcp.SequenceSharding getDefaultInstanceForType() {
        return gcppb.Gcp.SequenceSharding.getDefaultInstance();
      }

      public gcppb.Gcp.SequenceSharding build() {
        gcppb.Gcp.SequenceSharding result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gcppb.Gcp.SequenceSharding buildPartial() {
        gcppb.Gcp.SequenceSharding result = new gcppb.Gcp.SequenceSharding(this);
        result.shards_ = shards_;
        result.size_ = size_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gcppb.Gcp.SequenceSharding) {
          return mergeFrom((gcppb.Gcp.SequenceSharding)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gcppb.Gcp.SequenceSharding other) {
        if (other == gcppb.Gcp.SequenceSharding.getDefaultInstance()) return this;
        if (other.getShards() != 0) {
          setShards(other.getShards());
        }
        if (other.getSize() != 0L) {
          setSize(other.getSize());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gcppb.Gcp.SequenceSharding parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gcppb.Gcp.SequenceSharding) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int shards_ ;
      /**
       * <code>uint32 shards = 1;</code>
       */
      public int getShards() {
        return shards_;
      }
      /**
       * <code>uint32 shards = 1;</code>
       */
      public Builder setShards(int value) {
        
        shards_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shards = 1;</code>
       */
      public Builder clearShards() {
        
        shards_ = 0;
        onChanged();
        return this;
      }

      private long size_ ;
      /**
       * <code>uint64 size = 2;</code>
       */
      public long getSize() {
        return size_;
      }
      /**
       * <code>uint64 size = 2;</code>
       */
      public Builder setSize(long value) {
        
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 size = 2;</code>
       */
      public Builder clearSize() {
        
        size_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gcppb.SequenceSharding)
    }

    // @@protoc_insertion_point(class_scope:gcppb.SequenceSharding)
    private static final gcppb.Gcp.SequenceSharding DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gcppb.Gcp.SequenceSharding();
    }

    public static gcppb.Gcp.SequenceSharding getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SequenceSharding>
        PARSER = new com.google.protobuf.AbstractParser<SequenceSharding>() {
      public SequenceSharding parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SequenceSharding(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SequenceSharding> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SequenceSharding> getParserForType() {
      return PARSER;
    }

    public gcppb.Gcp.SequenceSharding getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gcppb_BuildJob_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gcppb_BuildJob_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gcppb_TreeSharding_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gcppb_TreeSharding_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gcppb_SequenceSharding_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gcppb_SequenceSharding_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"skylog/storage/gcp/gcppb/gcp.proto\022\005gc" +
      "ppb\"\222\001\n\010BuildJob\022\017\n\007tree_id\030\001 \001(\003\022\r\n\005beg" +
      "in\030\002 \001(\004\022\013\n\003end\030\003 \001(\004\022*\n\rtree_sharding\030\004" +
      " \001(\0132\023.gcppb.TreeSharding\022-\n\014seq_shardin" +
      "g\030\005 \001(\0132\027.gcppb.SequenceSharding\".\n\014Tree" +
      "Sharding\022\016\n\006levels\030\001 \001(\r\022\016\n\006shards\030\002 \001(\r" +
      "\"0\n\020SequenceSharding\022\016\n\006shards\030\001 \001(\r\022\014\n\004" +
      "size\030\002 \001(\004B5Z3github.com/google/trillian" +
      "/skylog/storage/gcp/gcppbb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_gcppb_BuildJob_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gcppb_BuildJob_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gcppb_BuildJob_descriptor,
        new java.lang.String[] { "TreeId", "Begin", "End", "TreeSharding", "SeqSharding", });
    internal_static_gcppb_TreeSharding_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_gcppb_TreeSharding_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gcppb_TreeSharding_descriptor,
        new java.lang.String[] { "Levels", "Shards", });
    internal_static_gcppb_SequenceSharding_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_gcppb_SequenceSharding_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gcppb_SequenceSharding_descriptor,
        new java.lang.String[] { "Shards", "Size", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
