// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authz.proto

package com.google.keytransparency.impl;

public final class Authz {
  private Authz() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface AuthorizationPolicyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.google.keytransparency.impl.AuthorizationPolicy)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    int getRolesCount();
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    boolean containsRoles(
        java.lang.String key);
    /**
     * Use {@link #getRolesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>
    getRoles();
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>
    getRolesMap();
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */

    com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getRolesOrDefault(
        java.lang.String key,
        com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role defaultValue);
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */

    com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getRolesOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    int getResourceToRoleLabelsCount();
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    boolean containsResourceToRoleLabels(
        java.lang.String key);
    /**
     * Use {@link #getResourceToRoleLabelsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>
    getResourceToRoleLabels();
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>
    getResourceToRoleLabelsMap();
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */

    com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getResourceToRoleLabelsOrDefault(
        java.lang.String key,
        com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels defaultValue);
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */

    com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getResourceToRoleLabelsOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * AuthorizationPolicy contains an authorization policy.
   * </pre>
   *
   * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy}
   */
  public  static final class AuthorizationPolicy extends
      com.google.protobuf.GeneratedMessageLite<
          AuthorizationPolicy, AuthorizationPolicy.Builder> implements
      // @@protoc_insertion_point(message_implements:com.google.keytransparency.impl.AuthorizationPolicy)
      AuthorizationPolicyOrBuilder {
    private AuthorizationPolicy() {
    }
    public interface ResourceOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.google.keytransparency.impl.AuthorizationPolicy.Resource)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       * @return The directoryId.
       */
      java.lang.String getDirectoryId();
      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       * @return The bytes for directoryId.
       */
      com.google.protobuf.ByteString
          getDirectoryIdBytes();
    }
    /**
     * <pre>
     * Resource contains the resource being accessed.
     * </pre>
     *
     * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy.Resource}
     */
    public  static final class Resource extends
        com.google.protobuf.GeneratedMessageLite<
            Resource, Resource.Builder> implements
        // @@protoc_insertion_point(message_implements:com.google.keytransparency.impl.AuthorizationPolicy.Resource)
        ResourceOrBuilder {
      private Resource() {
        directoryId_ = "";
      }
      public static final int DIRECTORY_ID_FIELD_NUMBER = 1;
      private java.lang.String directoryId_;
      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       * @return The directoryId.
       */
      @java.lang.Override
      public java.lang.String getDirectoryId() {
        return directoryId_;
      }
      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       * @return The bytes for directoryId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDirectoryIdBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(directoryId_);
      }
      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       * @param value The directoryId to set.
       */
      private void setDirectoryId(
          java.lang.String value) {
        value.getClass();
  
        directoryId_ = value;
      }
      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       */
      private void clearDirectoryId() {
        
        directoryId_ = getDefaultInstance().getDirectoryId();
      }
      /**
       * <pre>
       * directory_id contains the Key Transparency directory of this entry.
       * </pre>
       *
       * <code>string directory_id = 1;</code>
       * @param value The bytes for directoryId to set.
       */
      private void setDirectoryIdBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        directoryId_ = value.toStringUtf8();
        
      }

      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Resource contains the resource being accessed.
       * </pre>
       *
       * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy.Resource}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource, Builder> implements
          // @@protoc_insertion_point(builder_implements:com.google.keytransparency.impl.AuthorizationPolicy.Resource)
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.ResourceOrBuilder {
        // Construct using com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * directory_id contains the Key Transparency directory of this entry.
         * </pre>
         *
         * <code>string directory_id = 1;</code>
         * @return The directoryId.
         */
        @java.lang.Override
        public java.lang.String getDirectoryId() {
          return instance.getDirectoryId();
        }
        /**
         * <pre>
         * directory_id contains the Key Transparency directory of this entry.
         * </pre>
         *
         * <code>string directory_id = 1;</code>
         * @return The bytes for directoryId.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getDirectoryIdBytes() {
          return instance.getDirectoryIdBytes();
        }
        /**
         * <pre>
         * directory_id contains the Key Transparency directory of this entry.
         * </pre>
         *
         * <code>string directory_id = 1;</code>
         * @param value The directoryId to set.
         * @return This builder for chaining.
         */
        public Builder setDirectoryId(
            java.lang.String value) {
          copyOnWrite();
          instance.setDirectoryId(value);
          return this;
        }
        /**
         * <pre>
         * directory_id contains the Key Transparency directory of this entry.
         * </pre>
         *
         * <code>string directory_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDirectoryId() {
          copyOnWrite();
          instance.clearDirectoryId();
          return this;
        }
        /**
         * <pre>
         * directory_id contains the Key Transparency directory of this entry.
         * </pre>
         *
         * <code>string directory_id = 1;</code>
         * @param value The bytes for directoryId to set.
         * @return This builder for chaining.
         */
        public Builder setDirectoryIdBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setDirectoryIdBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.google.keytransparency.impl.AuthorizationPolicy.Resource)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "directoryId_",
              };
              java.lang.String info =
                  "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0208";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:com.google.keytransparency.impl.AuthorizationPolicy.Resource)
      private static final com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource DEFAULT_INSTANCE;
      static {
        Resource defaultInstance = new Resource();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Resource.class, defaultInstance);
      }

      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Resource getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Resource> PARSER;

      public static com.google.protobuf.Parser<Resource> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface RoleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.google.keytransparency.impl.AuthorizationPolicy.Role)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @return A list containing the principals.
       */
      java.util.List<java.lang.String>
          getPrincipalsList();
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @return The count of principals.
       */
      int getPrincipalsCount();
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param index The index of the element to return.
       * @return The principals at the given index.
       */
      java.lang.String getPrincipals(int index);
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param index The index of the element to return.
       * @return The principals at the given index.
       */
      com.google.protobuf.ByteString
          getPrincipalsBytes(int index);
    }
    /**
     * <pre>
     * Role contains a specific identity of an authorization entry.
     * </pre>
     *
     * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy.Role}
     */
    public  static final class Role extends
        com.google.protobuf.GeneratedMessageLite<
            Role, Role.Builder> implements
        // @@protoc_insertion_point(message_implements:com.google.keytransparency.impl.AuthorizationPolicy.Role)
        RoleOrBuilder {
      private Role() {
        principals_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      }
      public static final int PRINCIPALS_FIELD_NUMBER = 1;
      private com.google.protobuf.Internal.ProtobufList<java.lang.String> principals_;
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @return A list containing the principals.
       */
      @java.lang.Override
      public java.util.List<java.lang.String> getPrincipalsList() {
        return principals_;
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @return The count of principals.
       */
      @java.lang.Override
      public int getPrincipalsCount() {
        return principals_.size();
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param index The index of the element to return.
       * @return The principals at the given index.
       */
      @java.lang.Override
      public java.lang.String getPrincipals(int index) {
        return principals_.get(index);
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the principals at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPrincipalsBytes(int index) {
        return com.google.protobuf.ByteString.copyFromUtf8(
            principals_.get(index));
      }
      private void ensurePrincipalsIsMutable() {
        com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
            principals_;  if (!tmp.isModifiable()) {
          principals_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param index The index to set the value at.
       * @param value The principals to set.
       */
      private void setPrincipals(
          int index, java.lang.String value) {
        value.getClass();
  ensurePrincipalsIsMutable();
        principals_.set(index, value);
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param value The principals to add.
       */
      private void addPrincipals(
          java.lang.String value) {
        value.getClass();
  ensurePrincipalsIsMutable();
        principals_.add(value);
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param values The principals to add.
       */
      private void addAllPrincipals(
          java.lang.Iterable<java.lang.String> values) {
        ensurePrincipalsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, principals_);
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       */
      private void clearPrincipals() {
        principals_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      }
      /**
       * <pre>
       * principals contains an application specific identifier for this entry.
       * </pre>
       *
       * <code>repeated string principals = 1;</code>
       * @param value The bytes of the principals to add.
       */
      private void addPrincipalsBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        ensurePrincipalsIsMutable();
        principals_.add(value.toStringUtf8());
      }

      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Role contains a specific identity of an authorization entry.
       * </pre>
       *
       * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy.Role}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role, Builder> implements
          // @@protoc_insertion_point(builder_implements:com.google.keytransparency.impl.AuthorizationPolicy.Role)
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleOrBuilder {
        // Construct using com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @return A list containing the principals.
         */
        @java.lang.Override
        public java.util.List<java.lang.String>
            getPrincipalsList() {
          return java.util.Collections.unmodifiableList(
              instance.getPrincipalsList());
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @return The count of principals.
         */
        @java.lang.Override
        public int getPrincipalsCount() {
          return instance.getPrincipalsCount();
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @param index The index of the element to return.
         * @return The principals at the given index.
         */
        @java.lang.Override
        public java.lang.String getPrincipals(int index) {
          return instance.getPrincipals(index);
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @param index The index of the value to return.
         * @return The bytes of the principals at the given index.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getPrincipalsBytes(int index) {
          return instance.getPrincipalsBytes(index);
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @param index The index to set the value at.
         * @param value The principals to set.
         * @return This builder for chaining.
         */
        public Builder setPrincipals(
            int index, java.lang.String value) {
          copyOnWrite();
          instance.setPrincipals(index, value);
          return this;
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @param value The principals to add.
         * @return This builder for chaining.
         */
        public Builder addPrincipals(
            java.lang.String value) {
          copyOnWrite();
          instance.addPrincipals(value);
          return this;
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @param values The principals to add.
         * @return This builder for chaining.
         */
        public Builder addAllPrincipals(
            java.lang.Iterable<java.lang.String> values) {
          copyOnWrite();
          instance.addAllPrincipals(values);
          return this;
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrincipals() {
          copyOnWrite();
          instance.clearPrincipals();
          return this;
        }
        /**
         * <pre>
         * principals contains an application specific identifier for this entry.
         * </pre>
         *
         * <code>repeated string principals = 1;</code>
         * @param value The bytes of the principals to add.
         * @return This builder for chaining.
         */
        public Builder addPrincipalsBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.addPrincipalsBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.google.keytransparency.impl.AuthorizationPolicy.Role)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "principals_",
              };
              java.lang.String info =
                  "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u021a";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:com.google.keytransparency.impl.AuthorizationPolicy.Role)
      private static final com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role DEFAULT_INSTANCE;
      static {
        Role defaultInstance = new Role();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Role.class, defaultInstance);
      }

      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Role> PARSER;

      public static com.google.protobuf.Parser<Role> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface RoleLabelsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>repeated string labels = 1;</code>
       * @return A list containing the labels.
       */
      java.util.List<java.lang.String>
          getLabelsList();
      /**
       * <code>repeated string labels = 1;</code>
       * @return The count of labels.
       */
      int getLabelsCount();
      /**
       * <code>repeated string labels = 1;</code>
       * @param index The index of the element to return.
       * @return The labels at the given index.
       */
      java.lang.String getLabels(int index);
      /**
       * <code>repeated string labels = 1;</code>
       * @param index The index of the element to return.
       * @return The labels at the given index.
       */
      com.google.protobuf.ByteString
          getLabelsBytes(int index);
    }
    /**
     * <pre>
     * RoleLabels contains a lot of role labels identifying each role.
     * </pre>
     *
     * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels}
     */
    public  static final class RoleLabels extends
        com.google.protobuf.GeneratedMessageLite<
            RoleLabels, RoleLabels.Builder> implements
        // @@protoc_insertion_point(message_implements:com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels)
        RoleLabelsOrBuilder {
      private RoleLabels() {
        labels_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      }
      public static final int LABELS_FIELD_NUMBER = 1;
      private com.google.protobuf.Internal.ProtobufList<java.lang.String> labels_;
      /**
       * <code>repeated string labels = 1;</code>
       * @return A list containing the labels.
       */
      @java.lang.Override
      public java.util.List<java.lang.String> getLabelsList() {
        return labels_;
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @return The count of labels.
       */
      @java.lang.Override
      public int getLabelsCount() {
        return labels_.size();
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @param index The index of the element to return.
       * @return The labels at the given index.
       */
      @java.lang.Override
      public java.lang.String getLabels(int index) {
        return labels_.get(index);
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the labels at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getLabelsBytes(int index) {
        return com.google.protobuf.ByteString.copyFromUtf8(
            labels_.get(index));
      }
      private void ensureLabelsIsMutable() {
        com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
            labels_;  if (!tmp.isModifiable()) {
          labels_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @param index The index to set the value at.
       * @param value The labels to set.
       */
      private void setLabels(
          int index, java.lang.String value) {
        value.getClass();
  ensureLabelsIsMutable();
        labels_.set(index, value);
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @param value The labels to add.
       */
      private void addLabels(
          java.lang.String value) {
        value.getClass();
  ensureLabelsIsMutable();
        labels_.add(value);
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @param values The labels to add.
       */
      private void addAllLabels(
          java.lang.Iterable<java.lang.String> values) {
        ensureLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, labels_);
      }
      /**
       * <code>repeated string labels = 1;</code>
       */
      private void clearLabels() {
        labels_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      }
      /**
       * <code>repeated string labels = 1;</code>
       * @param value The bytes of the labels to add.
       */
      private void addLabelsBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        ensureLabelsIsMutable();
        labels_.add(value.toStringUtf8());
      }

      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * RoleLabels contains a lot of role labels identifying each role.
       * </pre>
       *
       * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels, Builder> implements
          // @@protoc_insertion_point(builder_implements:com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels)
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabelsOrBuilder {
        // Construct using com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>repeated string labels = 1;</code>
         * @return A list containing the labels.
         */
        @java.lang.Override
        public java.util.List<java.lang.String>
            getLabelsList() {
          return java.util.Collections.unmodifiableList(
              instance.getLabelsList());
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @return The count of labels.
         */
        @java.lang.Override
        public int getLabelsCount() {
          return instance.getLabelsCount();
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @param index The index of the element to return.
         * @return The labels at the given index.
         */
        @java.lang.Override
        public java.lang.String getLabels(int index) {
          return instance.getLabels(index);
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @param index The index of the value to return.
         * @return The bytes of the labels at the given index.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getLabelsBytes(int index) {
          return instance.getLabelsBytes(index);
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @param index The index to set the value at.
         * @param value The labels to set.
         * @return This builder for chaining.
         */
        public Builder setLabels(
            int index, java.lang.String value) {
          copyOnWrite();
          instance.setLabels(index, value);
          return this;
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @param value The labels to add.
         * @return This builder for chaining.
         */
        public Builder addLabels(
            java.lang.String value) {
          copyOnWrite();
          instance.addLabels(value);
          return this;
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @param values The labels to add.
         * @return This builder for chaining.
         */
        public Builder addAllLabels(
            java.lang.Iterable<java.lang.String> values) {
          copyOnWrite();
          instance.addAllLabels(values);
          return this;
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearLabels() {
          copyOnWrite();
          instance.clearLabels();
          return this;
        }
        /**
         * <code>repeated string labels = 1;</code>
         * @param value The bytes of the labels to add.
         * @return This builder for chaining.
         */
        public Builder addLabelsBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.addLabelsBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "labels_",
              };
              java.lang.String info =
                  "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u021a";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels)
      private static final com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels DEFAULT_INSTANCE;
      static {
        RoleLabels defaultInstance = new RoleLabels();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          RoleLabels.class, defaultInstance);
      }

      public static com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<RoleLabels> PARSER;

      public static com.google.protobuf.Parser<RoleLabels> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public static final int ROLES_FIELD_NUMBER = 2;
    private static final class RolesDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> roles_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>
    internalGetRoles() {
      return roles_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>
    internalGetMutableRoles() {
      if (!roles_.isMutable()) {
        roles_ = roles_.mutableCopy();
      }
      return roles_;
    }
    @java.lang.Override

    public int getRolesCount() {
      return internalGetRoles().size();
    }
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    @java.lang.Override

    public boolean containsRoles(
        java.lang.String key) {
      key.getClass();
      return internalGetRoles().containsKey(key);
    }
    /**
     * Use {@link #getRolesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> getRoles() {
      return getRolesMap();
    }
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> getRolesMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetRoles());
    }
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    @java.lang.Override

    public com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getRolesOrDefault(
        java.lang.String key,
        com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> map =
          internalGetRoles();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    @java.lang.Override

    public com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getRolesOrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> map =
          internalGetRoles();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * roles is a map of roles keyed by labels used in RoleLabels.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
     */
    private java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role>
    getMutableRolesMap() {
      return internalGetMutableRoles();
    }

    public static final int RESOURCE_TO_ROLE_LABELS_FIELD_NUMBER = 3;
    private static final class ResourceToRoleLabelsDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> resourceToRoleLabels_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>
    internalGetResourceToRoleLabels() {
      return resourceToRoleLabels_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>
    internalGetMutableResourceToRoleLabels() {
      if (!resourceToRoleLabels_.isMutable()) {
        resourceToRoleLabels_ = resourceToRoleLabels_.mutableCopy();
      }
      return resourceToRoleLabels_;
    }
    @java.lang.Override

    public int getResourceToRoleLabelsCount() {
      return internalGetResourceToRoleLabels().size();
    }
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    @java.lang.Override

    public boolean containsResourceToRoleLabels(
        java.lang.String key) {
      key.getClass();
      return internalGetResourceToRoleLabels().containsKey(key);
    }
    /**
     * Use {@link #getResourceToRoleLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> getResourceToRoleLabels() {
      return getResourceToRoleLabelsMap();
    }
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> getResourceToRoleLabelsMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetResourceToRoleLabels());
    }
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    @java.lang.Override

    public com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getResourceToRoleLabelsOrDefault(
        java.lang.String key,
        com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> map =
          internalGetResourceToRoleLabels();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    @java.lang.Override

    public com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getResourceToRoleLabelsOrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> map =
          internalGetResourceToRoleLabels();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
     * </pre>
     *
     * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
     */
    private java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels>
    getMutableResourceToRoleLabelsMap() {
      return internalGetMutableResourceToRoleLabels();
    }

    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.keytransparency.impl.Authz.AuthorizationPolicy prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * AuthorizationPolicy contains an authorization policy.
     * </pre>
     *
     * Protobuf type {@code com.google.keytransparency.impl.AuthorizationPolicy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.keytransparency.impl.Authz.AuthorizationPolicy, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.google.keytransparency.impl.AuthorizationPolicy)
        com.google.keytransparency.impl.Authz.AuthorizationPolicyOrBuilder {
      // Construct using com.google.keytransparency.impl.Authz.AuthorizationPolicy.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getRolesCount() {
        return instance.getRolesMap().size();
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */
      @java.lang.Override

      public boolean containsRoles(
          java.lang.String key) {
        key.getClass();
        return instance.getRolesMap().containsKey(key);
      }

      public Builder clearRoles() {
        copyOnWrite();
        instance.getMutableRolesMap().clear();
        return this;
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */

      public Builder removeRoles(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableRolesMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getRolesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> getRoles() {
        return getRolesMap();
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> getRolesMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getRolesMap());
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */
      @java.lang.Override

      public com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getRolesOrDefault(
          java.lang.String key,
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> map =
            instance.getRolesMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */
      @java.lang.Override

      public com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role getRolesOrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> map =
            instance.getRolesMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */
      public Builder putRoles(
          java.lang.String key,
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableRolesMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * roles is a map of roles keyed by labels used in RoleLabels.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.Role&gt; roles = 2;</code>
       */
      public Builder putAllRoles(
          java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.Role> values) {
        copyOnWrite();
        instance.getMutableRolesMap().putAll(values);
        return this;
      }

      @java.lang.Override

      public int getResourceToRoleLabelsCount() {
        return instance.getResourceToRoleLabelsMap().size();
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */
      @java.lang.Override

      public boolean containsResourceToRoleLabels(
          java.lang.String key) {
        key.getClass();
        return instance.getResourceToRoleLabelsMap().containsKey(key);
      }

      public Builder clearResourceToRoleLabels() {
        copyOnWrite();
        instance.getMutableResourceToRoleLabelsMap().clear();
        return this;
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */

      public Builder removeResourceToRoleLabels(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableResourceToRoleLabelsMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getResourceToRoleLabelsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> getResourceToRoleLabels() {
        return getResourceToRoleLabelsMap();
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> getResourceToRoleLabelsMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getResourceToRoleLabelsMap());
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */
      @java.lang.Override

      public com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getResourceToRoleLabelsOrDefault(
          java.lang.String key,
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> map =
            instance.getResourceToRoleLabelsMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */
      @java.lang.Override

      public com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels getResourceToRoleLabelsOrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> map =
            instance.getResourceToRoleLabelsMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */
      public Builder putResourceToRoleLabels(
          java.lang.String key,
          com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableResourceToRoleLabelsMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * resource_to_role_labels specifies the authorization policy keyed by resource directory_id.
       * </pre>
       *
       * <code>map&lt;string, .com.google.keytransparency.impl.AuthorizationPolicy.RoleLabels&gt; resource_to_role_labels = 3;</code>
       */
      public Builder putAllResourceToRoleLabels(
          java.util.Map<java.lang.String, com.google.keytransparency.impl.Authz.AuthorizationPolicy.RoleLabels> values) {
        copyOnWrite();
        instance.getMutableResourceToRoleLabelsMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.google.keytransparency.impl.AuthorizationPolicy)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.keytransparency.impl.Authz.AuthorizationPolicy();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "roles_",
              RolesDefaultEntryHolder.defaultEntry,
              "resourceToRoleLabels_",
              ResourceToRoleLabelsDefaultEntryHolder.defaultEntry,
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0002\u0003\u0002\u0002\u0000\u0000\u00022\u00032";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.keytransparency.impl.Authz.AuthorizationPolicy> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.keytransparency.impl.Authz.AuthorizationPolicy.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.keytransparency.impl.Authz.AuthorizationPolicy>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.google.keytransparency.impl.AuthorizationPolicy)
    private static final com.google.keytransparency.impl.Authz.AuthorizationPolicy DEFAULT_INSTANCE;
    static {
      AuthorizationPolicy defaultInstance = new AuthorizationPolicy();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        AuthorizationPolicy.class, defaultInstance);
    }

    public static com.google.keytransparency.impl.Authz.AuthorizationPolicy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AuthorizationPolicy> PARSER;

    public static com.google.protobuf.Parser<AuthorizationPolicy> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
