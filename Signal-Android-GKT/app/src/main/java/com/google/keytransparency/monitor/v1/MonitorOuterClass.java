// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

package com.google.keytransparency.monitor.v1;

public final class MonitorOuterClass {
  private MonitorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface GetStateRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.google.keytransparency.monitor.v1.GetStateRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     * @return The ktUrl.
     */
    java.lang.String getKtUrl();
    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     * @return The bytes for ktUrl.
     */
    com.google.protobuf.ByteString
        getKtUrlBytes();

    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     * @return The directoryId.
     */
    java.lang.String getDirectoryId();
    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     * @return The bytes for directoryId.
     */
    com.google.protobuf.ByteString
        getDirectoryIdBytes();

    /**
     * <pre>
     * revision specifies the revision for which the monitoring results will
     * be returned (revisions start at 0).
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     * @return The revision.
     */
    long getRevision();
  }
  /**
   * <pre>
   * GetStateRequest requests the verification state of a keytransparency
   * directory for a particular point in time.
   * </pre>
   *
   * Protobuf type {@code com.google.keytransparency.monitor.v1.GetStateRequest}
   */
  public  static final class GetStateRequest extends
      com.google.protobuf.GeneratedMessageLite<
          GetStateRequest, GetStateRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:com.google.keytransparency.monitor.v1.GetStateRequest)
      GetStateRequestOrBuilder {
    private GetStateRequest() {
      ktUrl_ = "";
      directoryId_ = "";
    }
    public static final int KT_URL_FIELD_NUMBER = 2;
    private java.lang.String ktUrl_;
    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     * @return The ktUrl.
     */
    @java.lang.Override
    public java.lang.String getKtUrl() {
      return ktUrl_;
    }
    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     * @return The bytes for ktUrl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKtUrlBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(ktUrl_);
    }
    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     * @param value The ktUrl to set.
     */
    private void setKtUrl(
        java.lang.String value) {
      value.getClass();
  
      ktUrl_ = value;
    }
    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     */
    private void clearKtUrl() {
      
      ktUrl_ = getDefaultInstance().getKtUrl();
    }
    /**
     * <pre>
     * kt_url is the URL of the keytransparency server for which the monitoring
     * result will be returned.
     * </pre>
     *
     * <code>string kt_url = 2;</code>
     * @param value The bytes for ktUrl to set.
     */
    private void setKtUrlBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      ktUrl_ = value.toStringUtf8();
      
    }

    public static final int DIRECTORY_ID_FIELD_NUMBER = 3;
    private java.lang.String directoryId_;
    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     * @return The directoryId.
     */
    @java.lang.Override
    public java.lang.String getDirectoryId() {
      return directoryId_;
    }
    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     * @return The bytes for directoryId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDirectoryIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(directoryId_);
    }
    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     * @param value The directoryId to set.
     */
    private void setDirectoryId(
        java.lang.String value) {
      value.getClass();
  
      directoryId_ = value;
    }
    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     */
    private void clearDirectoryId() {
      
      directoryId_ = getDefaultInstance().getDirectoryId();
    }
    /**
     * <pre>
     * directory_id identifies the merkle tree being monitored.
     * </pre>
     *
     * <code>string directory_id = 3;</code>
     * @param value The bytes for directoryId to set.
     */
    private void setDirectoryIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      directoryId_ = value.toStringUtf8();
      
    }

    public static final int REVISION_FIELD_NUMBER = 1;
    private long revision_;
    /**
     * <pre>
     * revision specifies the revision for which the monitoring results will
     * be returned (revisions start at 0).
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     * @return The revision.
     */
    @java.lang.Override
    public long getRevision() {
      return revision_;
    }
    /**
     * <pre>
     * revision specifies the revision for which the monitoring results will
     * be returned (revisions start at 0).
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     * @param value The revision to set.
     */
    private void setRevision(long value) {
      
      revision_ = value;
    }
    /**
     * <pre>
     * revision specifies the revision for which the monitoring results will
     * be returned (revisions start at 0).
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     */
    private void clearRevision() {
      
      revision_ = 0L;
    }

    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * GetStateRequest requests the verification state of a keytransparency
     * directory for a particular point in time.
     * </pre>
     *
     * Protobuf type {@code com.google.keytransparency.monitor.v1.GetStateRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.google.keytransparency.monitor.v1.GetStateRequest)
        com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequestOrBuilder {
      // Construct using com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * kt_url is the URL of the keytransparency server for which the monitoring
       * result will be returned.
       * </pre>
       *
       * <code>string kt_url = 2;</code>
       * @return The ktUrl.
       */
      @java.lang.Override
      public java.lang.String getKtUrl() {
        return instance.getKtUrl();
      }
      /**
       * <pre>
       * kt_url is the URL of the keytransparency server for which the monitoring
       * result will be returned.
       * </pre>
       *
       * <code>string kt_url = 2;</code>
       * @return The bytes for ktUrl.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getKtUrlBytes() {
        return instance.getKtUrlBytes();
      }
      /**
       * <pre>
       * kt_url is the URL of the keytransparency server for which the monitoring
       * result will be returned.
       * </pre>
       *
       * <code>string kt_url = 2;</code>
       * @param value The ktUrl to set.
       * @return This builder for chaining.
       */
      public Builder setKtUrl(
          java.lang.String value) {
        copyOnWrite();
        instance.setKtUrl(value);
        return this;
      }
      /**
       * <pre>
       * kt_url is the URL of the keytransparency server for which the monitoring
       * result will be returned.
       * </pre>
       *
       * <code>string kt_url = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearKtUrl() {
        copyOnWrite();
        instance.clearKtUrl();
        return this;
      }
      /**
       * <pre>
       * kt_url is the URL of the keytransparency server for which the monitoring
       * result will be returned.
       * </pre>
       *
       * <code>string kt_url = 2;</code>
       * @param value The bytes for ktUrl to set.
       * @return This builder for chaining.
       */
      public Builder setKtUrlBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setKtUrlBytes(value);
        return this;
      }

      /**
       * <pre>
       * directory_id identifies the merkle tree being monitored.
       * </pre>
       *
       * <code>string directory_id = 3;</code>
       * @return The directoryId.
       */
      @java.lang.Override
      public java.lang.String getDirectoryId() {
        return instance.getDirectoryId();
      }
      /**
       * <pre>
       * directory_id identifies the merkle tree being monitored.
       * </pre>
       *
       * <code>string directory_id = 3;</code>
       * @return The bytes for directoryId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDirectoryIdBytes() {
        return instance.getDirectoryIdBytes();
      }
      /**
       * <pre>
       * directory_id identifies the merkle tree being monitored.
       * </pre>
       *
       * <code>string directory_id = 3;</code>
       * @param value The directoryId to set.
       * @return This builder for chaining.
       */
      public Builder setDirectoryId(
          java.lang.String value) {
        copyOnWrite();
        instance.setDirectoryId(value);
        return this;
      }
      /**
       * <pre>
       * directory_id identifies the merkle tree being monitored.
       * </pre>
       *
       * <code>string directory_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDirectoryId() {
        copyOnWrite();
        instance.clearDirectoryId();
        return this;
      }
      /**
       * <pre>
       * directory_id identifies the merkle tree being monitored.
       * </pre>
       *
       * <code>string directory_id = 3;</code>
       * @param value The bytes for directoryId to set.
       * @return This builder for chaining.
       */
      public Builder setDirectoryIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDirectoryIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * revision specifies the revision for which the monitoring results will
       * be returned (revisions start at 0).
       * </pre>
       *
       * <code>int64 revision = 1;</code>
       * @return The revision.
       */
      @java.lang.Override
      public long getRevision() {
        return instance.getRevision();
      }
      /**
       * <pre>
       * revision specifies the revision for which the monitoring results will
       * be returned (revisions start at 0).
       * </pre>
       *
       * <code>int64 revision = 1;</code>
       * @param value The revision to set.
       * @return This builder for chaining.
       */
      public Builder setRevision(long value) {
        copyOnWrite();
        instance.setRevision(value);
        return this;
      }
      /**
       * <pre>
       * revision specifies the revision for which the monitoring results will
       * be returned (revisions start at 0).
       * </pre>
       *
       * <code>int64 revision = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRevision() {
        copyOnWrite();
        instance.clearRevision();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.google.keytransparency.monitor.v1.GetStateRequest)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "revision_",
              "ktUrl_",
              "directoryId_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u0002\u0002\u0208" +
                "\u0003\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.google.keytransparency.monitor.v1.GetStateRequest)
    private static final com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest DEFAULT_INSTANCE;
    static {
      GetStateRequest defaultInstance = new GetStateRequest();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GetStateRequest.class, defaultInstance);
    }

    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.GetStateRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GetStateRequest> PARSER;

    public static com.google.protobuf.Parser<GetStateRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.google.keytransparency.monitor.v1.State)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     * @return Whether the smr field is set.
     */
    boolean hasSmr();
    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     * @return The smr.
     */
    com.google.trillian.proto.SignedMapRoot getSmr();

    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     * @return Whether the seenTime field is set.
     */
    boolean hasSeenTime();
    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     * @return The seenTime.
     */
    com.google.protobuf.Timestamp getSeenTime();

    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    java.util.List<com.google.rpc.Status> 
        getErrorsList();
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    com.google.rpc.Status getErrors(int index);
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    int getErrorsCount();
  }
  /**
   * <pre>
   * State represents the monitor's evaluation of a Key Transparency directory
   * at a particular revision.
   * </pre>
   *
   * Protobuf type {@code com.google.keytransparency.monitor.v1.State}
   */
  public  static final class State extends
      com.google.protobuf.GeneratedMessageLite<
          State, State.Builder> implements
      // @@protoc_insertion_point(message_implements:com.google.keytransparency.monitor.v1.State)
      StateOrBuilder {
    private State() {
      errors_ = emptyProtobufList();
    }
    public static final int SMR_FIELD_NUMBER = 1;
    private com.google.trillian.proto.SignedMapRoot smr_;
    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     */
    @java.lang.Override
    public boolean hasSmr() {
      return smr_ != null;
    }
    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     */
    @java.lang.Override
    public com.google.trillian.proto.SignedMapRoot getSmr() {
      return smr_ == null ? com.google.trillian.proto.SignedMapRoot.getDefaultInstance() : smr_;
    }
    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     */
    private void setSmr(com.google.trillian.proto.SignedMapRoot value) {
      value.getClass();
  smr_ = value;
      
      }
    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeSmr(com.google.trillian.proto.SignedMapRoot value) {
      value.getClass();
  if (smr_ != null &&
          smr_ != com.google.trillian.proto.SignedMapRoot.getDefaultInstance()) {
        smr_ =
          com.google.trillian.proto.SignedMapRoot.newBuilder(smr_).mergeFrom(value).buildPartial();
      } else {
        smr_ = value;
      }
      
    }
    /**
     * <pre>
     * smr contains the map root for the sparse Merkle Tree signed with the
     * monitor's key on success. If the checks were not successful the
     * smr will be empty. The revisions are encoded into the smr map_revision.
     * </pre>
     *
     * <code>.trillian.SignedMapRoot smr = 1;</code>
     */
    private void clearSmr() {  smr_ = null;
      
    }

    public static final int SEEN_TIME_FIELD_NUMBER = 2;
    private com.google.protobuf.Timestamp seenTime_;
    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     */
    @java.lang.Override
    public boolean hasSeenTime() {
      return seenTime_ != null;
    }
    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getSeenTime() {
      return seenTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : seenTime_;
    }
    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     */
    private void setSeenTime(com.google.protobuf.Timestamp value) {
      value.getClass();
  seenTime_ = value;
      
      }
    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeSeenTime(com.google.protobuf.Timestamp value) {
      value.getClass();
  if (seenTime_ != null &&
          seenTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
        seenTime_ =
          com.google.protobuf.Timestamp.newBuilder(seenTime_).mergeFrom(value).buildPartial();
      } else {
        seenTime_ = value;
      }
      
    }
    /**
     * <pre>
     * seen_time contains the time when this particular signed map root was
     * retrieved and processed.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp seen_time = 2;</code>
     */
    private void clearSeenTime() {  seenTime_ = null;
      
    }

    public static final int ERRORS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<com.google.rpc.Status> errors_;
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.rpc.Status> getErrorsList() {
      return errors_;
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    public java.util.List<? extends com.google.rpc.StatusOrBuilder> 
        getErrorsOrBuilderList() {
      return errors_;
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    @java.lang.Override
    public int getErrorsCount() {
      return errors_.size();
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    @java.lang.Override
    public com.google.rpc.Status getErrors(int index) {
      return errors_.get(index);
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    public com.google.rpc.StatusOrBuilder getErrorsOrBuilder(
        int index) {
      return errors_.get(index);
    }
    private void ensureErrorsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.rpc.Status> tmp = errors_;
      if (!tmp.isModifiable()) {
        errors_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    private void setErrors(
        int index, com.google.rpc.Status value) {
      value.getClass();
  ensureErrorsIsMutable();
      errors_.set(index, value);
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    private void addErrors(com.google.rpc.Status value) {
      value.getClass();
  ensureErrorsIsMutable();
      errors_.add(value);
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    private void addErrors(
        int index, com.google.rpc.Status value) {
      value.getClass();
  ensureErrorsIsMutable();
      errors_.add(index, value);
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    private void addAllErrors(
        java.lang.Iterable<? extends com.google.rpc.Status> values) {
      ensureErrorsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, errors_);
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    private void clearErrors() {
      errors_ = emptyProtobufList();
    }
    /**
     * <pre>
     * errors contains a list of errors representing the verification checks
     * that failed while monitoring the key-transparency server.
     * </pre>
     *
     * <code>repeated .google.rpc.Status errors = 3;</code>
     */
    private void removeErrors(int index) {
      ensureErrorsIsMutable();
      errors_.remove(index);
    }

    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.keytransparency.monitor.v1.MonitorOuterClass.State prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * State represents the monitor's evaluation of a Key Transparency directory
     * at a particular revision.
     * </pre>
     *
     * Protobuf type {@code com.google.keytransparency.monitor.v1.State}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.keytransparency.monitor.v1.MonitorOuterClass.State, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.google.keytransparency.monitor.v1.State)
        com.google.keytransparency.monitor.v1.MonitorOuterClass.StateOrBuilder {
      // Construct using com.google.keytransparency.monitor.v1.MonitorOuterClass.State.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * smr contains the map root for the sparse Merkle Tree signed with the
       * monitor's key on success. If the checks were not successful the
       * smr will be empty. The revisions are encoded into the smr map_revision.
       * </pre>
       *
       * <code>.trillian.SignedMapRoot smr = 1;</code>
       */
      @java.lang.Override
      public boolean hasSmr() {
        return instance.hasSmr();
      }
      /**
       * <pre>
       * smr contains the map root for the sparse Merkle Tree signed with the
       * monitor's key on success. If the checks were not successful the
       * smr will be empty. The revisions are encoded into the smr map_revision.
       * </pre>
       *
       * <code>.trillian.SignedMapRoot smr = 1;</code>
       */
      @java.lang.Override
      public com.google.trillian.proto.SignedMapRoot getSmr() {
        return instance.getSmr();
      }
      /**
       * <pre>
       * smr contains the map root for the sparse Merkle Tree signed with the
       * monitor's key on success. If the checks were not successful the
       * smr will be empty. The revisions are encoded into the smr map_revision.
       * </pre>
       *
       * <code>.trillian.SignedMapRoot smr = 1;</code>
       */
      public Builder setSmr(com.google.trillian.proto.SignedMapRoot value) {
        copyOnWrite();
        instance.setSmr(value);
        return this;
        }
      /**
       * <pre>
       * smr contains the map root for the sparse Merkle Tree signed with the
       * monitor's key on success. If the checks were not successful the
       * smr will be empty. The revisions are encoded into the smr map_revision.
       * </pre>
       *
       * <code>.trillian.SignedMapRoot smr = 1;</code>
       */
      public Builder setSmr(
          com.google.trillian.proto.SignedMapRoot.Builder builderForValue) {
        copyOnWrite();
        instance.setSmr(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * smr contains the map root for the sparse Merkle Tree signed with the
       * monitor's key on success. If the checks were not successful the
       * smr will be empty. The revisions are encoded into the smr map_revision.
       * </pre>
       *
       * <code>.trillian.SignedMapRoot smr = 1;</code>
       */
      public Builder mergeSmr(com.google.trillian.proto.SignedMapRoot value) {
        copyOnWrite();
        instance.mergeSmr(value);
        return this;
      }
      /**
       * <pre>
       * smr contains the map root for the sparse Merkle Tree signed with the
       * monitor's key on success. If the checks were not successful the
       * smr will be empty. The revisions are encoded into the smr map_revision.
       * </pre>
       *
       * <code>.trillian.SignedMapRoot smr = 1;</code>
       */
      public Builder clearSmr() {  copyOnWrite();
        instance.clearSmr();
        return this;
      }

      /**
       * <pre>
       * seen_time contains the time when this particular signed map root was
       * retrieved and processed.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp seen_time = 2;</code>
       */
      @java.lang.Override
      public boolean hasSeenTime() {
        return instance.hasSeenTime();
      }
      /**
       * <pre>
       * seen_time contains the time when this particular signed map root was
       * retrieved and processed.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp seen_time = 2;</code>
       */
      @java.lang.Override
      public com.google.protobuf.Timestamp getSeenTime() {
        return instance.getSeenTime();
      }
      /**
       * <pre>
       * seen_time contains the time when this particular signed map root was
       * retrieved and processed.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp seen_time = 2;</code>
       */
      public Builder setSeenTime(com.google.protobuf.Timestamp value) {
        copyOnWrite();
        instance.setSeenTime(value);
        return this;
        }
      /**
       * <pre>
       * seen_time contains the time when this particular signed map root was
       * retrieved and processed.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp seen_time = 2;</code>
       */
      public Builder setSeenTime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        copyOnWrite();
        instance.setSeenTime(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * seen_time contains the time when this particular signed map root was
       * retrieved and processed.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp seen_time = 2;</code>
       */
      public Builder mergeSeenTime(com.google.protobuf.Timestamp value) {
        copyOnWrite();
        instance.mergeSeenTime(value);
        return this;
      }
      /**
       * <pre>
       * seen_time contains the time when this particular signed map root was
       * retrieved and processed.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp seen_time = 2;</code>
       */
      public Builder clearSeenTime() {  copyOnWrite();
        instance.clearSeenTime();
        return this;
      }

      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      @java.lang.Override
      public java.util.List<com.google.rpc.Status> getErrorsList() {
        return java.util.Collections.unmodifiableList(
            instance.getErrorsList());
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      @java.lang.Override
      public int getErrorsCount() {
        return instance.getErrorsCount();
      }/**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      @java.lang.Override
      public com.google.rpc.Status getErrors(int index) {
        return instance.getErrors(index);
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder setErrors(
          int index, com.google.rpc.Status value) {
        copyOnWrite();
        instance.setErrors(index, value);
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder setErrors(
          int index, com.google.rpc.Status.Builder builderForValue) {
        copyOnWrite();
        instance.setErrors(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder addErrors(com.google.rpc.Status value) {
        copyOnWrite();
        instance.addErrors(value);
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder addErrors(
          int index, com.google.rpc.Status value) {
        copyOnWrite();
        instance.addErrors(index, value);
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder addErrors(
          com.google.rpc.Status.Builder builderForValue) {
        copyOnWrite();
        instance.addErrors(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder addErrors(
          int index, com.google.rpc.Status.Builder builderForValue) {
        copyOnWrite();
        instance.addErrors(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder addAllErrors(
          java.lang.Iterable<? extends com.google.rpc.Status> values) {
        copyOnWrite();
        instance.addAllErrors(values);
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder clearErrors() {
        copyOnWrite();
        instance.clearErrors();
        return this;
      }
      /**
       * <pre>
       * errors contains a list of errors representing the verification checks
       * that failed while monitoring the key-transparency server.
       * </pre>
       *
       * <code>repeated .google.rpc.Status errors = 3;</code>
       */
      public Builder removeErrors(int index) {
        copyOnWrite();
        instance.removeErrors(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.google.keytransparency.monitor.v1.State)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.keytransparency.monitor.v1.MonitorOuterClass.State();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "smr_",
              "seenTime_",
              "errors_",
              com.google.rpc.Status.class,
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\t\u0002\t\u0003" +
                "\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.keytransparency.monitor.v1.MonitorOuterClass.State> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.keytransparency.monitor.v1.MonitorOuterClass.State.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.keytransparency.monitor.v1.MonitorOuterClass.State>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.google.keytransparency.monitor.v1.State)
    private static final com.google.keytransparency.monitor.v1.MonitorOuterClass.State DEFAULT_INSTANCE;
    static {
      State defaultInstance = new State();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        State.class, defaultInstance);
    }

    public static com.google.keytransparency.monitor.v1.MonitorOuterClass.State getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<State> PARSER;

    public static com.google.protobuf.Parser<State> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
