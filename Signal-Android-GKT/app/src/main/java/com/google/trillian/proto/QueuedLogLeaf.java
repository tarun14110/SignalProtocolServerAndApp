// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_log_api.proto

package com.google.trillian.proto;

/**
 * <pre>
 * QueuedLogLeaf provides the result of submitting an entry to the log.
 * TODO(pavelkalinnikov): Consider renaming it to AddLogLeafResult or the like.
 * </pre>
 *
 * Protobuf type {@code trillian.QueuedLogLeaf}
 */
public  final class QueuedLogLeaf extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:trillian.QueuedLogLeaf)
    QueuedLogLeafOrBuilder {
private static final long serialVersionUID = 0L;
  // Use QueuedLogLeaf.newBuilder() to construct.
  private QueuedLogLeaf(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private QueuedLogLeaf() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private QueuedLogLeaf(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.trillian.proto.LogLeaf.Builder subBuilder = null;
            if (leaf_ != null) {
              subBuilder = leaf_.toBuilder();
            }
            leaf_ = input.readMessage(com.google.trillian.proto.LogLeaf.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(leaf_);
              leaf_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.google.rpc.Status.Builder subBuilder = null;
            if (status_ != null) {
              subBuilder = status_.toBuilder();
            }
            status_ = input.readMessage(com.google.rpc.Status.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(status_);
              status_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_QueuedLogLeaf_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_QueuedLogLeaf_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.trillian.proto.QueuedLogLeaf.class, com.google.trillian.proto.QueuedLogLeaf.Builder.class);
  }

  public static final int LEAF_FIELD_NUMBER = 1;
  private com.google.trillian.proto.LogLeaf leaf_;
  /**
   * <pre>
   * The leaf as it was stored by Trillian. Empty unless `status.code` is:
   *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
   *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
   *    `leaf` is the conflicting one already in the log.
   * </pre>
   *
   * <code>.trillian.LogLeaf leaf = 1;</code>
   */
  public boolean hasLeaf() {
    return leaf_ != null;
  }
  /**
   * <pre>
   * The leaf as it was stored by Trillian. Empty unless `status.code` is:
   *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
   *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
   *    `leaf` is the conflicting one already in the log.
   * </pre>
   *
   * <code>.trillian.LogLeaf leaf = 1;</code>
   */
  public com.google.trillian.proto.LogLeaf getLeaf() {
    return leaf_ == null ? com.google.trillian.proto.LogLeaf.getDefaultInstance() : leaf_;
  }
  /**
   * <pre>
   * The leaf as it was stored by Trillian. Empty unless `status.code` is:
   *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
   *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
   *    `leaf` is the conflicting one already in the log.
   * </pre>
   *
   * <code>.trillian.LogLeaf leaf = 1;</code>
   */
  public com.google.trillian.proto.LogLeafOrBuilder getLeafOrBuilder() {
    return getLeaf();
  }

  public static final int STATUS_FIELD_NUMBER = 2;
  private com.google.rpc.Status status_;
  /**
   * <pre>
   * The status of adding the leaf.
   *  - `google.rpc.OK`: successfully added.
   *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
   *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
   *    mode, or `leaf_index` in the `PREORDERED_LOG`.
   *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
   *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
   * </pre>
   *
   * <code>.google.rpc.Status status = 2;</code>
   */
  public boolean hasStatus() {
    return status_ != null;
  }
  /**
   * <pre>
   * The status of adding the leaf.
   *  - `google.rpc.OK`: successfully added.
   *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
   *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
   *    mode, or `leaf_index` in the `PREORDERED_LOG`.
   *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
   *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
   * </pre>
   *
   * <code>.google.rpc.Status status = 2;</code>
   */
  public com.google.rpc.Status getStatus() {
    return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
  }
  /**
   * <pre>
   * The status of adding the leaf.
   *  - `google.rpc.OK`: successfully added.
   *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
   *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
   *    mode, or `leaf_index` in the `PREORDERED_LOG`.
   *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
   *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
   * </pre>
   *
   * <code>.google.rpc.Status status = 2;</code>
   */
  public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
    return getStatus();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (leaf_ != null) {
      output.writeMessage(1, getLeaf());
    }
    if (status_ != null) {
      output.writeMessage(2, getStatus());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (leaf_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getLeaf());
    }
    if (status_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getStatus());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.trillian.proto.QueuedLogLeaf)) {
      return super.equals(obj);
    }
    com.google.trillian.proto.QueuedLogLeaf other = (com.google.trillian.proto.QueuedLogLeaf) obj;

    boolean result = true;
    result = result && (hasLeaf() == other.hasLeaf());
    if (hasLeaf()) {
      result = result && getLeaf()
          .equals(other.getLeaf());
    }
    result = result && (hasStatus() == other.hasStatus());
    if (hasStatus()) {
      result = result && getStatus()
          .equals(other.getStatus());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasLeaf()) {
      hash = (37 * hash) + LEAF_FIELD_NUMBER;
      hash = (53 * hash) + getLeaf().hashCode();
    }
    if (hasStatus()) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.QueuedLogLeaf parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.trillian.proto.QueuedLogLeaf prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * QueuedLogLeaf provides the result of submitting an entry to the log.
   * TODO(pavelkalinnikov): Consider renaming it to AddLogLeafResult or the like.
   * </pre>
   *
   * Protobuf type {@code trillian.QueuedLogLeaf}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:trillian.QueuedLogLeaf)
      com.google.trillian.proto.QueuedLogLeafOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_QueuedLogLeaf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_QueuedLogLeaf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.trillian.proto.QueuedLogLeaf.class, com.google.trillian.proto.QueuedLogLeaf.Builder.class);
    }

    // Construct using com.google.trillian.proto.QueuedLogLeaf.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (leafBuilder_ == null) {
        leaf_ = null;
      } else {
        leaf_ = null;
        leafBuilder_ = null;
      }
      if (statusBuilder_ == null) {
        status_ = null;
      } else {
        status_ = null;
        statusBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_QueuedLogLeaf_descriptor;
    }

    public com.google.trillian.proto.QueuedLogLeaf getDefaultInstanceForType() {
      return com.google.trillian.proto.QueuedLogLeaf.getDefaultInstance();
    }

    public com.google.trillian.proto.QueuedLogLeaf build() {
      com.google.trillian.proto.QueuedLogLeaf result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.trillian.proto.QueuedLogLeaf buildPartial() {
      com.google.trillian.proto.QueuedLogLeaf result = new com.google.trillian.proto.QueuedLogLeaf(this);
      if (leafBuilder_ == null) {
        result.leaf_ = leaf_;
      } else {
        result.leaf_ = leafBuilder_.build();
      }
      if (statusBuilder_ == null) {
        result.status_ = status_;
      } else {
        result.status_ = statusBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.trillian.proto.QueuedLogLeaf) {
        return mergeFrom((com.google.trillian.proto.QueuedLogLeaf)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.trillian.proto.QueuedLogLeaf other) {
      if (other == com.google.trillian.proto.QueuedLogLeaf.getDefaultInstance()) return this;
      if (other.hasLeaf()) {
        mergeLeaf(other.getLeaf());
      }
      if (other.hasStatus()) {
        mergeStatus(other.getStatus());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.trillian.proto.QueuedLogLeaf parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.trillian.proto.QueuedLogLeaf) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.trillian.proto.LogLeaf leaf_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.trillian.proto.LogLeaf, com.google.trillian.proto.LogLeaf.Builder, com.google.trillian.proto.LogLeafOrBuilder> leafBuilder_;
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public boolean hasLeaf() {
      return leafBuilder_ != null || leaf_ != null;
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public com.google.trillian.proto.LogLeaf getLeaf() {
      if (leafBuilder_ == null) {
        return leaf_ == null ? com.google.trillian.proto.LogLeaf.getDefaultInstance() : leaf_;
      } else {
        return leafBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public Builder setLeaf(com.google.trillian.proto.LogLeaf value) {
      if (leafBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        leaf_ = value;
        onChanged();
      } else {
        leafBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public Builder setLeaf(
        com.google.trillian.proto.LogLeaf.Builder builderForValue) {
      if (leafBuilder_ == null) {
        leaf_ = builderForValue.build();
        onChanged();
      } else {
        leafBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public Builder mergeLeaf(com.google.trillian.proto.LogLeaf value) {
      if (leafBuilder_ == null) {
        if (leaf_ != null) {
          leaf_ =
            com.google.trillian.proto.LogLeaf.newBuilder(leaf_).mergeFrom(value).buildPartial();
        } else {
          leaf_ = value;
        }
        onChanged();
      } else {
        leafBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public Builder clearLeaf() {
      if (leafBuilder_ == null) {
        leaf_ = null;
        onChanged();
      } else {
        leaf_ = null;
        leafBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public com.google.trillian.proto.LogLeaf.Builder getLeafBuilder() {
      
      onChanged();
      return getLeafFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    public com.google.trillian.proto.LogLeafOrBuilder getLeafOrBuilder() {
      if (leafBuilder_ != null) {
        return leafBuilder_.getMessageOrBuilder();
      } else {
        return leaf_ == null ?
            com.google.trillian.proto.LogLeaf.getDefaultInstance() : leaf_;
      }
    }
    /**
     * <pre>
     * The leaf as it was stored by Trillian. Empty unless `status.code` is:
     *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
     *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
     *    `leaf` is the conflicting one already in the log.
     * </pre>
     *
     * <code>.trillian.LogLeaf leaf = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.trillian.proto.LogLeaf, com.google.trillian.proto.LogLeaf.Builder, com.google.trillian.proto.LogLeafOrBuilder> 
        getLeafFieldBuilder() {
      if (leafBuilder_ == null) {
        leafBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.trillian.proto.LogLeaf, com.google.trillian.proto.LogLeaf.Builder, com.google.trillian.proto.LogLeafOrBuilder>(
                getLeaf(),
                getParentForChildren(),
                isClean());
        leaf_ = null;
      }
      return leafBuilder_;
    }

    private com.google.rpc.Status status_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> statusBuilder_;
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public boolean hasStatus() {
      return statusBuilder_ != null || status_ != null;
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public com.google.rpc.Status getStatus() {
      if (statusBuilder_ == null) {
        return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
      } else {
        return statusBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public Builder setStatus(com.google.rpc.Status value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        status_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public Builder setStatus(
        com.google.rpc.Status.Builder builderForValue) {
      if (statusBuilder_ == null) {
        status_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public Builder mergeStatus(com.google.rpc.Status value) {
      if (statusBuilder_ == null) {
        if (status_ != null) {
          status_ =
            com.google.rpc.Status.newBuilder(status_).mergeFrom(value).buildPartial();
        } else {
          status_ = value;
        }
        onChanged();
      } else {
        statusBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        status_ = null;
        onChanged();
      } else {
        status_ = null;
        statusBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public com.google.rpc.Status.Builder getStatusBuilder() {
      
      onChanged();
      return getStatusFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
      if (statusBuilder_ != null) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        return status_ == null ?
            com.google.rpc.Status.getDefaultInstance() : status_;
      }
    }
    /**
     * <pre>
     * The status of adding the leaf.
     *  - `google.rpc.OK`: successfully added.
     *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
     *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
     *    mode, or `leaf_index` in the `PREORDERED_LOG`.
     *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
     *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
     * </pre>
     *
     * <code>.google.rpc.Status status = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> 
        getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        statusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder>(
                getStatus(),
                getParentForChildren(),
                isClean());
        status_ = null;
      }
      return statusBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:trillian.QueuedLogLeaf)
  }

  // @@protoc_insertion_point(class_scope:trillian.QueuedLogLeaf)
  private static final com.google.trillian.proto.QueuedLogLeaf DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.trillian.proto.QueuedLogLeaf();
  }

  public static com.google.trillian.proto.QueuedLogLeaf getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QueuedLogLeaf>
      PARSER = new com.google.protobuf.AbstractParser<QueuedLogLeaf>() {
    public QueuedLogLeaf parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new QueuedLogLeaf(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<QueuedLogLeaf> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<QueuedLogLeaf> getParserForType() {
    return PARSER;
  }

  public com.google.trillian.proto.QueuedLogLeaf getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

