// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian.proto

package com.google.trillian.proto;

/**
 * <pre>
 * State of the tree.
 * </pre>
 *
 * Protobuf enum {@code trillian.TreeState}
 */
public enum TreeState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Tree state cannot be determined. Included to enable detection of
   * mismatched proto versions being used. Represents an invalid value.
   * </pre>
   *
   * <code>UNKNOWN_TREE_STATE = 0;</code>
   */
  UNKNOWN_TREE_STATE(0),
  /**
   * <pre>
   * Active trees are able to respond to both read and write requests.
   * </pre>
   *
   * <code>ACTIVE = 1;</code>
   */
  ACTIVE(1),
  /**
   * <pre>
   * Frozen trees are only able to respond to read requests, writing to a frozen
   * tree is forbidden. Trees should not be frozen when there are entries
   * in the queue that have not yet been integrated. See the DRAINING
   * state for this case.
   * </pre>
   *
   * <code>FROZEN = 2;</code>
   */
  FROZEN(2),
  /**
   * <pre>
   * Deprecated: now tracked in Tree.deleted.
   * </pre>
   *
   * <code>DEPRECATED_SOFT_DELETED = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  DEPRECATED_SOFT_DELETED(3),
  /**
   * <pre>
   * Deprecated: now tracked in Tree.deleted.
   * </pre>
   *
   * <code>DEPRECATED_HARD_DELETED = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  DEPRECATED_HARD_DELETED(4),
  /**
   * <pre>
   * A tree that is draining will continue to integrate queued entries.
   * No new entries should be accepted.
   * </pre>
   *
   * <code>DRAINING = 5;</code>
   */
  DRAINING(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Tree state cannot be determined. Included to enable detection of
   * mismatched proto versions being used. Represents an invalid value.
   * </pre>
   *
   * <code>UNKNOWN_TREE_STATE = 0;</code>
   */
  public static final int UNKNOWN_TREE_STATE_VALUE = 0;
  /**
   * <pre>
   * Active trees are able to respond to both read and write requests.
   * </pre>
   *
   * <code>ACTIVE = 1;</code>
   */
  public static final int ACTIVE_VALUE = 1;
  /**
   * <pre>
   * Frozen trees are only able to respond to read requests, writing to a frozen
   * tree is forbidden. Trees should not be frozen when there are entries
   * in the queue that have not yet been integrated. See the DRAINING
   * state for this case.
   * </pre>
   *
   * <code>FROZEN = 2;</code>
   */
  public static final int FROZEN_VALUE = 2;
  /**
   * <pre>
   * Deprecated: now tracked in Tree.deleted.
   * </pre>
   *
   * <code>DEPRECATED_SOFT_DELETED = 3 [deprecated = true];</code>
   */
  public static final int DEPRECATED_SOFT_DELETED_VALUE = 3;
  /**
   * <pre>
   * Deprecated: now tracked in Tree.deleted.
   * </pre>
   *
   * <code>DEPRECATED_HARD_DELETED = 4 [deprecated = true];</code>
   */
  public static final int DEPRECATED_HARD_DELETED_VALUE = 4;
  /**
   * <pre>
   * A tree that is draining will continue to integrate queued entries.
   * No new entries should be accepted.
   * </pre>
   *
   * <code>DRAINING = 5;</code>
   */
  public static final int DRAINING_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TreeState valueOf(int value) {
    return forNumber(value);
  }

  public static TreeState forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_TREE_STATE;
      case 1: return ACTIVE;
      case 2: return FROZEN;
      case 3: return DEPRECATED_SOFT_DELETED;
      case 4: return DEPRECATED_HARD_DELETED;
      case 5: return DRAINING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TreeState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TreeState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TreeState>() {
          public TreeState findValueByNumber(int number) {
            return TreeState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.trillian.proto.TrillianProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final TreeState[] VALUES = values();

  public static TreeState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TreeState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:trillian.TreeState)
}

