// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_log_api.proto

package com.google.trillian.proto;

public interface QueuedLogLeafOrBuilder extends
    // @@protoc_insertion_point(interface_extends:trillian.QueuedLogLeaf)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The leaf as it was stored by Trillian. Empty unless `status.code` is:
   *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
   *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
   *    `leaf` is the conflicting one already in the log.
   * </pre>
   *
   * <code>.trillian.LogLeaf leaf = 1;</code>
   */
  boolean hasLeaf();
  /**
   * <pre>
   * The leaf as it was stored by Trillian. Empty unless `status.code` is:
   *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
   *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
   *    `leaf` is the conflicting one already in the log.
   * </pre>
   *
   * <code>.trillian.LogLeaf leaf = 1;</code>
   */
  com.google.trillian.proto.LogLeaf getLeaf();
  /**
   * <pre>
   * The leaf as it was stored by Trillian. Empty unless `status.code` is:
   *  - `google.rpc.OK`: the `leaf` data is the same as in the request.
   *  - `google.rpc.ALREADY_EXISTS` or 'google.rpc.FAILED_PRECONDITION`: the
   *    `leaf` is the conflicting one already in the log.
   * </pre>
   *
   * <code>.trillian.LogLeaf leaf = 1;</code>
   */
  com.google.trillian.proto.LogLeafOrBuilder getLeafOrBuilder();

  /**
   * <pre>
   * The status of adding the leaf.
   *  - `google.rpc.OK`: successfully added.
   *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
   *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
   *    mode, or `leaf_index` in the `PREORDERED_LOG`.
   *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
   *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
   * </pre>
   *
   * <code>.google.rpc.Status status = 2;</code>
   */
  boolean hasStatus();
  /**
   * <pre>
   * The status of adding the leaf.
   *  - `google.rpc.OK`: successfully added.
   *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
   *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
   *    mode, or `leaf_index` in the `PREORDERED_LOG`.
   *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
   *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
   * </pre>
   *
   * <code>.google.rpc.Status status = 2;</code>
   */
  com.google.rpc.Status getStatus();
  /**
   * <pre>
   * The status of adding the leaf.
   *  - `google.rpc.OK`: successfully added.
   *  - `google.rpc.ALREADY_EXISTS`: the leaf is a duplicate of an already
   *    existing one. Either `leaf_identity_hash` is the same in the `LOG`
   *    mode, or `leaf_index` in the `PREORDERED_LOG`.
   *  - `google.rpc.FAILED_PRECONDITION`: A conflicting entry is already
   *    present in the log, e.g., same `leaf_index` but different `leaf_data`.
   * </pre>
   *
   * <code>.google.rpc.Status status = 2;</code>
   */
  com.google.rpc.StatusOrBuilder getStatusOrBuilder();
}
