// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian.proto

package com.google.trillian.proto;

/**
 * <pre>
 * Defines the way empty / node / leaf hashes are constructed incorporating
 * preimage protection, which can be application specific.
 * </pre>
 *
 * Protobuf enum {@code trillian.HashStrategy}
 */
public enum HashStrategy
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Hash strategy cannot be determined. Included to enable detection of
   * mismatched proto versions being used. Represents an invalid value.
   * </pre>
   *
   * <code>UNKNOWN_HASH_STRATEGY = 0;</code>
   */
  UNKNOWN_HASH_STRATEGY(0),
  /**
   * <pre>
   * Certificate Transparency strategy: leaf hash prefix = 0x00, node prefix =
   * 0x01, empty hash is digest([]byte{}), as defined in the specification.
   * </pre>
   *
   * <code>RFC6962_SHA256 = 1;</code>
   */
  RFC6962_SHA256(1),
  /**
   * <pre>
   * Sparse Merkle Tree strategy:  leaf hash prefix = 0x00, node prefix = 0x01,
   * empty branch is recursively computed from empty leaf nodes.
   * NOT secure in a multi tree environment. For testing only.
   * </pre>
   *
   * <code>TEST_MAP_HASHER = 2;</code>
   */
  TEST_MAP_HASHER(2),
  /**
   * <pre>
   * Append-only log strategy where leaf nodes are defined as the ObjectHash.
   * All other properties are equal to RFC6962_SHA256.
   * </pre>
   *
   * <code>OBJECT_RFC6962_SHA256 = 3;</code>
   */
  OBJECT_RFC6962_SHA256(3),
  /**
   * <pre>
   * The CONIKS sparse tree hasher with SHA512_256 as the hash algorithm.
   * </pre>
   *
   * <code>CONIKS_SHA512_256 = 4;</code>
   */
  CONIKS_SHA512_256(4),
  /**
   * <pre>
   * The CONIKS sparse tree hasher with SHA256 as the hash algorithm.
   * </pre>
   *
   * <code>CONIKS_SHA256 = 5;</code>
   */
  CONIKS_SHA256(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Hash strategy cannot be determined. Included to enable detection of
   * mismatched proto versions being used. Represents an invalid value.
   * </pre>
   *
   * <code>UNKNOWN_HASH_STRATEGY = 0;</code>
   */
  public static final int UNKNOWN_HASH_STRATEGY_VALUE = 0;
  /**
   * <pre>
   * Certificate Transparency strategy: leaf hash prefix = 0x00, node prefix =
   * 0x01, empty hash is digest([]byte{}), as defined in the specification.
   * </pre>
   *
   * <code>RFC6962_SHA256 = 1;</code>
   */
  public static final int RFC6962_SHA256_VALUE = 1;
  /**
   * <pre>
   * Sparse Merkle Tree strategy:  leaf hash prefix = 0x00, node prefix = 0x01,
   * empty branch is recursively computed from empty leaf nodes.
   * NOT secure in a multi tree environment. For testing only.
   * </pre>
   *
   * <code>TEST_MAP_HASHER = 2;</code>
   */
  public static final int TEST_MAP_HASHER_VALUE = 2;
  /**
   * <pre>
   * Append-only log strategy where leaf nodes are defined as the ObjectHash.
   * All other properties are equal to RFC6962_SHA256.
   * </pre>
   *
   * <code>OBJECT_RFC6962_SHA256 = 3;</code>
   */
  public static final int OBJECT_RFC6962_SHA256_VALUE = 3;
  /**
   * <pre>
   * The CONIKS sparse tree hasher with SHA512_256 as the hash algorithm.
   * </pre>
   *
   * <code>CONIKS_SHA512_256 = 4;</code>
   */
  public static final int CONIKS_SHA512_256_VALUE = 4;
  /**
   * <pre>
   * The CONIKS sparse tree hasher with SHA256 as the hash algorithm.
   * </pre>
   *
   * <code>CONIKS_SHA256 = 5;</code>
   */
  public static final int CONIKS_SHA256_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static HashStrategy valueOf(int value) {
    return forNumber(value);
  }

  public static HashStrategy forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_HASH_STRATEGY;
      case 1: return RFC6962_SHA256;
      case 2: return TEST_MAP_HASHER;
      case 3: return OBJECT_RFC6962_SHA256;
      case 4: return CONIKS_SHA512_256;
      case 5: return CONIKS_SHA256;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<HashStrategy>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      HashStrategy> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<HashStrategy>() {
          public HashStrategy findValueByNumber(int number) {
            return HashStrategy.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.trillian.proto.TrillianProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final HashStrategy[] VALUES = values();

  public static HashStrategy valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private HashStrategy(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:trillian.HashStrategy)
}

