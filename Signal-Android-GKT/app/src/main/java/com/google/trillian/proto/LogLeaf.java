// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_log_api.proto

package com.google.trillian.proto;

/**
 * <pre>
 * LogLeaf describes a leaf in the Log's Merkle tree, corresponding to a single log entry.
 * Each leaf has a unique leaf index in the scope of this tree.  Clients submitting new
 * leaf entries should only set the following fields:
 *   - leaf_value
 *   - extra_data (optionally)
 *   - leaf_identity_hash (optionally)
 *   - leaf_index (iff the log is a PREORDERED_LOG)
 * </pre>
 *
 * Protobuf type {@code trillian.LogLeaf}
 */
public  final class LogLeaf extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:trillian.LogLeaf)
    LogLeafOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LogLeaf.newBuilder() to construct.
  private LogLeaf(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LogLeaf() {
    merkleLeafHash_ = com.google.protobuf.ByteString.EMPTY;
    leafValue_ = com.google.protobuf.ByteString.EMPTY;
    extraData_ = com.google.protobuf.ByteString.EMPTY;
    leafIndex_ = 0L;
    leafIdentityHash_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LogLeaf(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {

            merkleLeafHash_ = input.readBytes();
            break;
          }
          case 18: {

            leafValue_ = input.readBytes();
            break;
          }
          case 26: {

            extraData_ = input.readBytes();
            break;
          }
          case 32: {

            leafIndex_ = input.readInt64();
            break;
          }
          case 42: {

            leafIdentityHash_ = input.readBytes();
            break;
          }
          case 50: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (queueTimestamp_ != null) {
              subBuilder = queueTimestamp_.toBuilder();
            }
            queueTimestamp_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(queueTimestamp_);
              queueTimestamp_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (integrateTimestamp_ != null) {
              subBuilder = integrateTimestamp_.toBuilder();
            }
            integrateTimestamp_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(integrateTimestamp_);
              integrateTimestamp_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_LogLeaf_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_LogLeaf_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.trillian.proto.LogLeaf.class, com.google.trillian.proto.LogLeaf.Builder.class);
  }

  public static final int MERKLE_LEAF_HASH_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString merkleLeafHash_;
  /**
   * <pre>
   * merkle_leaf_hash holds the Merkle leaf hash over leaf_value.  This is
   * calculated by the Trillian server when leaves are added to the tree, using
   * the defined hashing algorithm and strategy for the tree; as such, the client
   * does not need to set it on leaf submissions.
   * </pre>
   *
   * <code>bytes merkle_leaf_hash = 1;</code>
   */
  public com.google.protobuf.ByteString getMerkleLeafHash() {
    return merkleLeafHash_;
  }

  public static final int LEAF_VALUE_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString leafValue_;
  /**
   * <pre>
   * leaf_value holds the data that forms the value of the Merkle tree leaf.
   * The client should set this field on all leaf submissions, and is
   * responsible for ensuring its validity (the Trillian server treats it as an
   * opaque blob).
   * </pre>
   *
   * <code>bytes leaf_value = 2;</code>
   */
  public com.google.protobuf.ByteString getLeafValue() {
    return leafValue_;
  }

  public static final int EXTRA_DATA_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString extraData_;
  /**
   * <pre>
   * extra_data holds additional data associated with the Merkle tree leaf.
   * The client may set this data on leaf submissions, and the Trillian server
   * will return it on subsequent read operations. However, the contents of
   * this field are not covered by and do not affect the Merkle tree hash
   * calculations.
   * </pre>
   *
   * <code>bytes extra_data = 3;</code>
   */
  public com.google.protobuf.ByteString getExtraData() {
    return extraData_;
  }

  public static final int LEAF_INDEX_FIELD_NUMBER = 4;
  private long leafIndex_;
  /**
   * <pre>
   * leaf_index indicates the index of this leaf in the Merkle tree.
   * This field is returned on all read operations, but should only be
   * set for leaf submissions in PREORDERED_LOG mode (for a normal log
   * the leaf index is assigned by Trillian when the submitted leaf is
   * integrated into the Merkle tree).
   * </pre>
   *
   * <code>int64 leaf_index = 4;</code>
   */
  public long getLeafIndex() {
    return leafIndex_;
  }

  public static final int LEAF_IDENTITY_HASH_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString leafIdentityHash_;
  /**
   * <pre>
   * leaf_identity_hash provides a hash value that indicates the client's
   * concept of which leaf entries should be considered identical.
   * This mechanism allows the client personality to indicate that two leaves
   * should be considered "duplicates" even though their `leaf_value`s differ.
   * If this is not set on leaf submissions, the Trillian server will take its
   * value to be the same as merkle_leaf_hash (and thus only leaves with
   * identical leaf_value contents will be considered identical).
   * For example, in Certificate Transparency each certificate submission is
   * associated with a submission timestamp, but subsequent submissions of the
   * same certificate should be considered identical.  This is achieved
   * by setting the leaf identity hash to a hash over (just) the certificate,
   * whereas the Merkle leaf hash encompasses both the certificate and its
   * submission time -- allowing duplicate certificates to be detected.
   * Continuing the CT example, for a CT mirror personality (which must allow
   * dupes since the source log could contain them), the part of the
   * personality which fetches and submits the entries might set
   * `leaf_identity_hash` to `H(leaf_index||cert)`.
   * TODO(pavelkalinnikov): Consider instead using `H(cert)` and allowing
   * identity hash dupes in `PREORDERED_LOG` mode, for it can later be
   * upgraded to `LOG` which will need to correctly detect duplicates with
   * older entries when new ones get queued.
   * </pre>
   *
   * <code>bytes leaf_identity_hash = 5;</code>
   */
  public com.google.protobuf.ByteString getLeafIdentityHash() {
    return leafIdentityHash_;
  }

  public static final int QUEUE_TIMESTAMP_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp queueTimestamp_;
  /**
   * <pre>
   * queue_timestamp holds the time at which this leaf was queued for
   * inclusion in the Log, or zero if the entry was submitted without
   * queuing. Clients should not set this field on submissions.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
   */
  public boolean hasQueueTimestamp() {
    return queueTimestamp_ != null;
  }
  /**
   * <pre>
   * queue_timestamp holds the time at which this leaf was queued for
   * inclusion in the Log, or zero if the entry was submitted without
   * queuing. Clients should not set this field on submissions.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
   */
  public com.google.protobuf.Timestamp getQueueTimestamp() {
    return queueTimestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : queueTimestamp_;
  }
  /**
   * <pre>
   * queue_timestamp holds the time at which this leaf was queued for
   * inclusion in the Log, or zero if the entry was submitted without
   * queuing. Clients should not set this field on submissions.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getQueueTimestampOrBuilder() {
    return getQueueTimestamp();
  }

  public static final int INTEGRATE_TIMESTAMP_FIELD_NUMBER = 7;
  private com.google.protobuf.Timestamp integrateTimestamp_;
  /**
   * <pre>
   * integrate_timestamp holds the time at which this leaf was integrated into
   * the tree.  Clients should not set this field on submissions.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
   */
  public boolean hasIntegrateTimestamp() {
    return integrateTimestamp_ != null;
  }
  /**
   * <pre>
   * integrate_timestamp holds the time at which this leaf was integrated into
   * the tree.  Clients should not set this field on submissions.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
   */
  public com.google.protobuf.Timestamp getIntegrateTimestamp() {
    return integrateTimestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : integrateTimestamp_;
  }
  /**
   * <pre>
   * integrate_timestamp holds the time at which this leaf was integrated into
   * the tree.  Clients should not set this field on submissions.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getIntegrateTimestampOrBuilder() {
    return getIntegrateTimestamp();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!merkleLeafHash_.isEmpty()) {
      output.writeBytes(1, merkleLeafHash_);
    }
    if (!leafValue_.isEmpty()) {
      output.writeBytes(2, leafValue_);
    }
    if (!extraData_.isEmpty()) {
      output.writeBytes(3, extraData_);
    }
    if (leafIndex_ != 0L) {
      output.writeInt64(4, leafIndex_);
    }
    if (!leafIdentityHash_.isEmpty()) {
      output.writeBytes(5, leafIdentityHash_);
    }
    if (queueTimestamp_ != null) {
      output.writeMessage(6, getQueueTimestamp());
    }
    if (integrateTimestamp_ != null) {
      output.writeMessage(7, getIntegrateTimestamp());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!merkleLeafHash_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, merkleLeafHash_);
    }
    if (!leafValue_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, leafValue_);
    }
    if (!extraData_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, extraData_);
    }
    if (leafIndex_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, leafIndex_);
    }
    if (!leafIdentityHash_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(5, leafIdentityHash_);
    }
    if (queueTimestamp_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getQueueTimestamp());
    }
    if (integrateTimestamp_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getIntegrateTimestamp());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.trillian.proto.LogLeaf)) {
      return super.equals(obj);
    }
    com.google.trillian.proto.LogLeaf other = (com.google.trillian.proto.LogLeaf) obj;

    boolean result = true;
    result = result && getMerkleLeafHash()
        .equals(other.getMerkleLeafHash());
    result = result && getLeafValue()
        .equals(other.getLeafValue());
    result = result && getExtraData()
        .equals(other.getExtraData());
    result = result && (getLeafIndex()
        == other.getLeafIndex());
    result = result && getLeafIdentityHash()
        .equals(other.getLeafIdentityHash());
    result = result && (hasQueueTimestamp() == other.hasQueueTimestamp());
    if (hasQueueTimestamp()) {
      result = result && getQueueTimestamp()
          .equals(other.getQueueTimestamp());
    }
    result = result && (hasIntegrateTimestamp() == other.hasIntegrateTimestamp());
    if (hasIntegrateTimestamp()) {
      result = result && getIntegrateTimestamp()
          .equals(other.getIntegrateTimestamp());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MERKLE_LEAF_HASH_FIELD_NUMBER;
    hash = (53 * hash) + getMerkleLeafHash().hashCode();
    hash = (37 * hash) + LEAF_VALUE_FIELD_NUMBER;
    hash = (53 * hash) + getLeafValue().hashCode();
    hash = (37 * hash) + EXTRA_DATA_FIELD_NUMBER;
    hash = (53 * hash) + getExtraData().hashCode();
    hash = (37 * hash) + LEAF_INDEX_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLeafIndex());
    hash = (37 * hash) + LEAF_IDENTITY_HASH_FIELD_NUMBER;
    hash = (53 * hash) + getLeafIdentityHash().hashCode();
    if (hasQueueTimestamp()) {
      hash = (37 * hash) + QUEUE_TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + getQueueTimestamp().hashCode();
    }
    if (hasIntegrateTimestamp()) {
      hash = (37 * hash) + INTEGRATE_TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + getIntegrateTimestamp().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.trillian.proto.LogLeaf parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.trillian.proto.LogLeaf parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.LogLeaf parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.LogLeaf parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.trillian.proto.LogLeaf prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * LogLeaf describes a leaf in the Log's Merkle tree, corresponding to a single log entry.
   * Each leaf has a unique leaf index in the scope of this tree.  Clients submitting new
   * leaf entries should only set the following fields:
   *   - leaf_value
   *   - extra_data (optionally)
   *   - leaf_identity_hash (optionally)
   *   - leaf_index (iff the log is a PREORDERED_LOG)
   * </pre>
   *
   * Protobuf type {@code trillian.LogLeaf}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:trillian.LogLeaf)
      com.google.trillian.proto.LogLeafOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_LogLeaf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_LogLeaf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.trillian.proto.LogLeaf.class, com.google.trillian.proto.LogLeaf.Builder.class);
    }

    // Construct using com.google.trillian.proto.LogLeaf.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      merkleLeafHash_ = com.google.protobuf.ByteString.EMPTY;

      leafValue_ = com.google.protobuf.ByteString.EMPTY;

      extraData_ = com.google.protobuf.ByteString.EMPTY;

      leafIndex_ = 0L;

      leafIdentityHash_ = com.google.protobuf.ByteString.EMPTY;

      if (queueTimestampBuilder_ == null) {
        queueTimestamp_ = null;
      } else {
        queueTimestamp_ = null;
        queueTimestampBuilder_ = null;
      }
      if (integrateTimestampBuilder_ == null) {
        integrateTimestamp_ = null;
      } else {
        integrateTimestamp_ = null;
        integrateTimestampBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_LogLeaf_descriptor;
    }

    public com.google.trillian.proto.LogLeaf getDefaultInstanceForType() {
      return com.google.trillian.proto.LogLeaf.getDefaultInstance();
    }

    public com.google.trillian.proto.LogLeaf build() {
      com.google.trillian.proto.LogLeaf result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.trillian.proto.LogLeaf buildPartial() {
      com.google.trillian.proto.LogLeaf result = new com.google.trillian.proto.LogLeaf(this);
      result.merkleLeafHash_ = merkleLeafHash_;
      result.leafValue_ = leafValue_;
      result.extraData_ = extraData_;
      result.leafIndex_ = leafIndex_;
      result.leafIdentityHash_ = leafIdentityHash_;
      if (queueTimestampBuilder_ == null) {
        result.queueTimestamp_ = queueTimestamp_;
      } else {
        result.queueTimestamp_ = queueTimestampBuilder_.build();
      }
      if (integrateTimestampBuilder_ == null) {
        result.integrateTimestamp_ = integrateTimestamp_;
      } else {
        result.integrateTimestamp_ = integrateTimestampBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.trillian.proto.LogLeaf) {
        return mergeFrom((com.google.trillian.proto.LogLeaf)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.trillian.proto.LogLeaf other) {
      if (other == com.google.trillian.proto.LogLeaf.getDefaultInstance()) return this;
      if (other.getMerkleLeafHash() != com.google.protobuf.ByteString.EMPTY) {
        setMerkleLeafHash(other.getMerkleLeafHash());
      }
      if (other.getLeafValue() != com.google.protobuf.ByteString.EMPTY) {
        setLeafValue(other.getLeafValue());
      }
      if (other.getExtraData() != com.google.protobuf.ByteString.EMPTY) {
        setExtraData(other.getExtraData());
      }
      if (other.getLeafIndex() != 0L) {
        setLeafIndex(other.getLeafIndex());
      }
      if (other.getLeafIdentityHash() != com.google.protobuf.ByteString.EMPTY) {
        setLeafIdentityHash(other.getLeafIdentityHash());
      }
      if (other.hasQueueTimestamp()) {
        mergeQueueTimestamp(other.getQueueTimestamp());
      }
      if (other.hasIntegrateTimestamp()) {
        mergeIntegrateTimestamp(other.getIntegrateTimestamp());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.trillian.proto.LogLeaf parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.trillian.proto.LogLeaf) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.ByteString merkleLeafHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * merkle_leaf_hash holds the Merkle leaf hash over leaf_value.  This is
     * calculated by the Trillian server when leaves are added to the tree, using
     * the defined hashing algorithm and strategy for the tree; as such, the client
     * does not need to set it on leaf submissions.
     * </pre>
     *
     * <code>bytes merkle_leaf_hash = 1;</code>
     */
    public com.google.protobuf.ByteString getMerkleLeafHash() {
      return merkleLeafHash_;
    }
    /**
     * <pre>
     * merkle_leaf_hash holds the Merkle leaf hash over leaf_value.  This is
     * calculated by the Trillian server when leaves are added to the tree, using
     * the defined hashing algorithm and strategy for the tree; as such, the client
     * does not need to set it on leaf submissions.
     * </pre>
     *
     * <code>bytes merkle_leaf_hash = 1;</code>
     */
    public Builder setMerkleLeafHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      merkleLeafHash_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * merkle_leaf_hash holds the Merkle leaf hash over leaf_value.  This is
     * calculated by the Trillian server when leaves are added to the tree, using
     * the defined hashing algorithm and strategy for the tree; as such, the client
     * does not need to set it on leaf submissions.
     * </pre>
     *
     * <code>bytes merkle_leaf_hash = 1;</code>
     */
    public Builder clearMerkleLeafHash() {
      
      merkleLeafHash_ = getDefaultInstance().getMerkleLeafHash();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString leafValue_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * leaf_value holds the data that forms the value of the Merkle tree leaf.
     * The client should set this field on all leaf submissions, and is
     * responsible for ensuring its validity (the Trillian server treats it as an
     * opaque blob).
     * </pre>
     *
     * <code>bytes leaf_value = 2;</code>
     */
    public com.google.protobuf.ByteString getLeafValue() {
      return leafValue_;
    }
    /**
     * <pre>
     * leaf_value holds the data that forms the value of the Merkle tree leaf.
     * The client should set this field on all leaf submissions, and is
     * responsible for ensuring its validity (the Trillian server treats it as an
     * opaque blob).
     * </pre>
     *
     * <code>bytes leaf_value = 2;</code>
     */
    public Builder setLeafValue(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      leafValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * leaf_value holds the data that forms the value of the Merkle tree leaf.
     * The client should set this field on all leaf submissions, and is
     * responsible for ensuring its validity (the Trillian server treats it as an
     * opaque blob).
     * </pre>
     *
     * <code>bytes leaf_value = 2;</code>
     */
    public Builder clearLeafValue() {
      
      leafValue_ = getDefaultInstance().getLeafValue();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString extraData_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * extra_data holds additional data associated with the Merkle tree leaf.
     * The client may set this data on leaf submissions, and the Trillian server
     * will return it on subsequent read operations. However, the contents of
     * this field are not covered by and do not affect the Merkle tree hash
     * calculations.
     * </pre>
     *
     * <code>bytes extra_data = 3;</code>
     */
    public com.google.protobuf.ByteString getExtraData() {
      return extraData_;
    }
    /**
     * <pre>
     * extra_data holds additional data associated with the Merkle tree leaf.
     * The client may set this data on leaf submissions, and the Trillian server
     * will return it on subsequent read operations. However, the contents of
     * this field are not covered by and do not affect the Merkle tree hash
     * calculations.
     * </pre>
     *
     * <code>bytes extra_data = 3;</code>
     */
    public Builder setExtraData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      extraData_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * extra_data holds additional data associated with the Merkle tree leaf.
     * The client may set this data on leaf submissions, and the Trillian server
     * will return it on subsequent read operations. However, the contents of
     * this field are not covered by and do not affect the Merkle tree hash
     * calculations.
     * </pre>
     *
     * <code>bytes extra_data = 3;</code>
     */
    public Builder clearExtraData() {
      
      extraData_ = getDefaultInstance().getExtraData();
      onChanged();
      return this;
    }

    private long leafIndex_ ;
    /**
     * <pre>
     * leaf_index indicates the index of this leaf in the Merkle tree.
     * This field is returned on all read operations, but should only be
     * set for leaf submissions in PREORDERED_LOG mode (for a normal log
     * the leaf index is assigned by Trillian when the submitted leaf is
     * integrated into the Merkle tree).
     * </pre>
     *
     * <code>int64 leaf_index = 4;</code>
     */
    public long getLeafIndex() {
      return leafIndex_;
    }
    /**
     * <pre>
     * leaf_index indicates the index of this leaf in the Merkle tree.
     * This field is returned on all read operations, but should only be
     * set for leaf submissions in PREORDERED_LOG mode (for a normal log
     * the leaf index is assigned by Trillian when the submitted leaf is
     * integrated into the Merkle tree).
     * </pre>
     *
     * <code>int64 leaf_index = 4;</code>
     */
    public Builder setLeafIndex(long value) {
      
      leafIndex_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * leaf_index indicates the index of this leaf in the Merkle tree.
     * This field is returned on all read operations, but should only be
     * set for leaf submissions in PREORDERED_LOG mode (for a normal log
     * the leaf index is assigned by Trillian when the submitted leaf is
     * integrated into the Merkle tree).
     * </pre>
     *
     * <code>int64 leaf_index = 4;</code>
     */
    public Builder clearLeafIndex() {
      
      leafIndex_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString leafIdentityHash_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * leaf_identity_hash provides a hash value that indicates the client's
     * concept of which leaf entries should be considered identical.
     * This mechanism allows the client personality to indicate that two leaves
     * should be considered "duplicates" even though their `leaf_value`s differ.
     * If this is not set on leaf submissions, the Trillian server will take its
     * value to be the same as merkle_leaf_hash (and thus only leaves with
     * identical leaf_value contents will be considered identical).
     * For example, in Certificate Transparency each certificate submission is
     * associated with a submission timestamp, but subsequent submissions of the
     * same certificate should be considered identical.  This is achieved
     * by setting the leaf identity hash to a hash over (just) the certificate,
     * whereas the Merkle leaf hash encompasses both the certificate and its
     * submission time -- allowing duplicate certificates to be detected.
     * Continuing the CT example, for a CT mirror personality (which must allow
     * dupes since the source log could contain them), the part of the
     * personality which fetches and submits the entries might set
     * `leaf_identity_hash` to `H(leaf_index||cert)`.
     * TODO(pavelkalinnikov): Consider instead using `H(cert)` and allowing
     * identity hash dupes in `PREORDERED_LOG` mode, for it can later be
     * upgraded to `LOG` which will need to correctly detect duplicates with
     * older entries when new ones get queued.
     * </pre>
     *
     * <code>bytes leaf_identity_hash = 5;</code>
     */
    public com.google.protobuf.ByteString getLeafIdentityHash() {
      return leafIdentityHash_;
    }
    /**
     * <pre>
     * leaf_identity_hash provides a hash value that indicates the client's
     * concept of which leaf entries should be considered identical.
     * This mechanism allows the client personality to indicate that two leaves
     * should be considered "duplicates" even though their `leaf_value`s differ.
     * If this is not set on leaf submissions, the Trillian server will take its
     * value to be the same as merkle_leaf_hash (and thus only leaves with
     * identical leaf_value contents will be considered identical).
     * For example, in Certificate Transparency each certificate submission is
     * associated with a submission timestamp, but subsequent submissions of the
     * same certificate should be considered identical.  This is achieved
     * by setting the leaf identity hash to a hash over (just) the certificate,
     * whereas the Merkle leaf hash encompasses both the certificate and its
     * submission time -- allowing duplicate certificates to be detected.
     * Continuing the CT example, for a CT mirror personality (which must allow
     * dupes since the source log could contain them), the part of the
     * personality which fetches and submits the entries might set
     * `leaf_identity_hash` to `H(leaf_index||cert)`.
     * TODO(pavelkalinnikov): Consider instead using `H(cert)` and allowing
     * identity hash dupes in `PREORDERED_LOG` mode, for it can later be
     * upgraded to `LOG` which will need to correctly detect duplicates with
     * older entries when new ones get queued.
     * </pre>
     *
     * <code>bytes leaf_identity_hash = 5;</code>
     */
    public Builder setLeafIdentityHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      leafIdentityHash_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * leaf_identity_hash provides a hash value that indicates the client's
     * concept of which leaf entries should be considered identical.
     * This mechanism allows the client personality to indicate that two leaves
     * should be considered "duplicates" even though their `leaf_value`s differ.
     * If this is not set on leaf submissions, the Trillian server will take its
     * value to be the same as merkle_leaf_hash (and thus only leaves with
     * identical leaf_value contents will be considered identical).
     * For example, in Certificate Transparency each certificate submission is
     * associated with a submission timestamp, but subsequent submissions of the
     * same certificate should be considered identical.  This is achieved
     * by setting the leaf identity hash to a hash over (just) the certificate,
     * whereas the Merkle leaf hash encompasses both the certificate and its
     * submission time -- allowing duplicate certificates to be detected.
     * Continuing the CT example, for a CT mirror personality (which must allow
     * dupes since the source log could contain them), the part of the
     * personality which fetches and submits the entries might set
     * `leaf_identity_hash` to `H(leaf_index||cert)`.
     * TODO(pavelkalinnikov): Consider instead using `H(cert)` and allowing
     * identity hash dupes in `PREORDERED_LOG` mode, for it can later be
     * upgraded to `LOG` which will need to correctly detect duplicates with
     * older entries when new ones get queued.
     * </pre>
     *
     * <code>bytes leaf_identity_hash = 5;</code>
     */
    public Builder clearLeafIdentityHash() {
      
      leafIdentityHash_ = getDefaultInstance().getLeafIdentityHash();
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp queueTimestamp_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> queueTimestampBuilder_;
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public boolean hasQueueTimestamp() {
      return queueTimestampBuilder_ != null || queueTimestamp_ != null;
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public com.google.protobuf.Timestamp getQueueTimestamp() {
      if (queueTimestampBuilder_ == null) {
        return queueTimestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : queueTimestamp_;
      } else {
        return queueTimestampBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public Builder setQueueTimestamp(com.google.protobuf.Timestamp value) {
      if (queueTimestampBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        queueTimestamp_ = value;
        onChanged();
      } else {
        queueTimestampBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public Builder setQueueTimestamp(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (queueTimestampBuilder_ == null) {
        queueTimestamp_ = builderForValue.build();
        onChanged();
      } else {
        queueTimestampBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public Builder mergeQueueTimestamp(com.google.protobuf.Timestamp value) {
      if (queueTimestampBuilder_ == null) {
        if (queueTimestamp_ != null) {
          queueTimestamp_ =
            com.google.protobuf.Timestamp.newBuilder(queueTimestamp_).mergeFrom(value).buildPartial();
        } else {
          queueTimestamp_ = value;
        }
        onChanged();
      } else {
        queueTimestampBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public Builder clearQueueTimestamp() {
      if (queueTimestampBuilder_ == null) {
        queueTimestamp_ = null;
        onChanged();
      } else {
        queueTimestamp_ = null;
        queueTimestampBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getQueueTimestampBuilder() {
      
      onChanged();
      return getQueueTimestampFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getQueueTimestampOrBuilder() {
      if (queueTimestampBuilder_ != null) {
        return queueTimestampBuilder_.getMessageOrBuilder();
      } else {
        return queueTimestamp_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : queueTimestamp_;
      }
    }
    /**
     * <pre>
     * queue_timestamp holds the time at which this leaf was queued for
     * inclusion in the Log, or zero if the entry was submitted without
     * queuing. Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp queue_timestamp = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getQueueTimestampFieldBuilder() {
      if (queueTimestampBuilder_ == null) {
        queueTimestampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getQueueTimestamp(),
                getParentForChildren(),
                isClean());
        queueTimestamp_ = null;
      }
      return queueTimestampBuilder_;
    }

    private com.google.protobuf.Timestamp integrateTimestamp_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> integrateTimestampBuilder_;
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public boolean hasIntegrateTimestamp() {
      return integrateTimestampBuilder_ != null || integrateTimestamp_ != null;
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public com.google.protobuf.Timestamp getIntegrateTimestamp() {
      if (integrateTimestampBuilder_ == null) {
        return integrateTimestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : integrateTimestamp_;
      } else {
        return integrateTimestampBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public Builder setIntegrateTimestamp(com.google.protobuf.Timestamp value) {
      if (integrateTimestampBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        integrateTimestamp_ = value;
        onChanged();
      } else {
        integrateTimestampBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public Builder setIntegrateTimestamp(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (integrateTimestampBuilder_ == null) {
        integrateTimestamp_ = builderForValue.build();
        onChanged();
      } else {
        integrateTimestampBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public Builder mergeIntegrateTimestamp(com.google.protobuf.Timestamp value) {
      if (integrateTimestampBuilder_ == null) {
        if (integrateTimestamp_ != null) {
          integrateTimestamp_ =
            com.google.protobuf.Timestamp.newBuilder(integrateTimestamp_).mergeFrom(value).buildPartial();
        } else {
          integrateTimestamp_ = value;
        }
        onChanged();
      } else {
        integrateTimestampBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public Builder clearIntegrateTimestamp() {
      if (integrateTimestampBuilder_ == null) {
        integrateTimestamp_ = null;
        onChanged();
      } else {
        integrateTimestamp_ = null;
        integrateTimestampBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public com.google.protobuf.Timestamp.Builder getIntegrateTimestampBuilder() {
      
      onChanged();
      return getIntegrateTimestampFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getIntegrateTimestampOrBuilder() {
      if (integrateTimestampBuilder_ != null) {
        return integrateTimestampBuilder_.getMessageOrBuilder();
      } else {
        return integrateTimestamp_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : integrateTimestamp_;
      }
    }
    /**
     * <pre>
     * integrate_timestamp holds the time at which this leaf was integrated into
     * the tree.  Clients should not set this field on submissions.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp integrate_timestamp = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getIntegrateTimestampFieldBuilder() {
      if (integrateTimestampBuilder_ == null) {
        integrateTimestampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getIntegrateTimestamp(),
                getParentForChildren(),
                isClean());
        integrateTimestamp_ = null;
      }
      return integrateTimestampBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:trillian.LogLeaf)
  }

  // @@protoc_insertion_point(class_scope:trillian.LogLeaf)
  private static final com.google.trillian.proto.LogLeaf DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.trillian.proto.LogLeaf();
  }

  public static com.google.trillian.proto.LogLeaf getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LogLeaf>
      PARSER = new com.google.protobuf.AbstractParser<LogLeaf>() {
    public LogLeaf parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LogLeaf(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LogLeaf> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LogLeaf> getParserForType() {
    return PARSER;
  }

  public com.google.trillian.proto.LogLeaf getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

