// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_log_api.proto

package com.google.trillian.proto;

public interface ChargeToOrBuilder extends
    // @@protoc_insertion_point(interface_extends:trillian.ChargeTo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * user is a list of personality-defined strings.
   * Trillian will treat them as /User/%{user}/... keys when checking and
   * charging quota.
   * If one or more of the specified users has insufficient quota, the
   * request will be denied.
   * As an example, a Certificate Transparency frontend might set the following
   * user strings when sending a QueueLeaves request to the Trillian log:
   *   - The requesting IP address.
   *     This would limit the number of requests per IP.
   *   - The "intermediate-&lt;hash&gt;" for each of the intermediate certificates in
   *     the submitted chain.
   *     This would have the effect of limiting the rate of submissions under
   *     a given intermediate/root.
   * </pre>
   *
   * <code>repeated string user = 1;</code>
   */
  java.util.List<java.lang.String>
      getUserList();
  /**
   * <pre>
   * user is a list of personality-defined strings.
   * Trillian will treat them as /User/%{user}/... keys when checking and
   * charging quota.
   * If one or more of the specified users has insufficient quota, the
   * request will be denied.
   * As an example, a Certificate Transparency frontend might set the following
   * user strings when sending a QueueLeaves request to the Trillian log:
   *   - The requesting IP address.
   *     This would limit the number of requests per IP.
   *   - The "intermediate-&lt;hash&gt;" for each of the intermediate certificates in
   *     the submitted chain.
   *     This would have the effect of limiting the rate of submissions under
   *     a given intermediate/root.
   * </pre>
   *
   * <code>repeated string user = 1;</code>
   */
  int getUserCount();
  /**
   * <pre>
   * user is a list of personality-defined strings.
   * Trillian will treat them as /User/%{user}/... keys when checking and
   * charging quota.
   * If one or more of the specified users has insufficient quota, the
   * request will be denied.
   * As an example, a Certificate Transparency frontend might set the following
   * user strings when sending a QueueLeaves request to the Trillian log:
   *   - The requesting IP address.
   *     This would limit the number of requests per IP.
   *   - The "intermediate-&lt;hash&gt;" for each of the intermediate certificates in
   *     the submitted chain.
   *     This would have the effect of limiting the rate of submissions under
   *     a given intermediate/root.
   * </pre>
   *
   * <code>repeated string user = 1;</code>
   */
  java.lang.String getUser(int index);
  /**
   * <pre>
   * user is a list of personality-defined strings.
   * Trillian will treat them as /User/%{user}/... keys when checking and
   * charging quota.
   * If one or more of the specified users has insufficient quota, the
   * request will be denied.
   * As an example, a Certificate Transparency frontend might set the following
   * user strings when sending a QueueLeaves request to the Trillian log:
   *   - The requesting IP address.
   *     This would limit the number of requests per IP.
   *   - The "intermediate-&lt;hash&gt;" for each of the intermediate certificates in
   *     the submitted chain.
   *     This would have the effect of limiting the rate of submissions under
   *     a given intermediate/root.
   * </pre>
   *
   * <code>repeated string user = 1;</code>
   */
  com.google.protobuf.ByteString
      getUserBytes(int index);
}
