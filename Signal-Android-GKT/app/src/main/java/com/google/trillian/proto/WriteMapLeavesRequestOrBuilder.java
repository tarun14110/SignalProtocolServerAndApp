// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_map_api.proto

package com.google.trillian.proto;

public interface WriteMapLeavesRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:trillian.WriteMapLeavesRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>int64 map_id = 1;</code>
   */
  long getMapId();

  /**
   * <pre>
   * The leaves being set must have unique Index values within the request.
   * </pre>
   *
   * <code>repeated .trillian.MapLeaf leaves = 2;</code>
   */
  java.util.List<com.google.trillian.proto.MapLeaf> 
      getLeavesList();
  /**
   * <pre>
   * The leaves being set must have unique Index values within the request.
   * </pre>
   *
   * <code>repeated .trillian.MapLeaf leaves = 2;</code>
   */
  com.google.trillian.proto.MapLeaf getLeaves(int index);
  /**
   * <pre>
   * The leaves being set must have unique Index values within the request.
   * </pre>
   *
   * <code>repeated .trillian.MapLeaf leaves = 2;</code>
   */
  int getLeavesCount();
  /**
   * <pre>
   * The leaves being set must have unique Index values within the request.
   * </pre>
   *
   * <code>repeated .trillian.MapLeaf leaves = 2;</code>
   */
  java.util.List<? extends com.google.trillian.proto.MapLeafOrBuilder> 
      getLeavesOrBuilderList();
  /**
   * <pre>
   * The leaves being set must have unique Index values within the request.
   * </pre>
   *
   * <code>repeated .trillian.MapLeaf leaves = 2;</code>
   */
  com.google.trillian.proto.MapLeafOrBuilder getLeavesOrBuilder(
      int index);

  /**
   * <pre>
   * Metadata that the Map should associate with the new Map root after
   * incorporating the leaf changes.  The metadata will be reflected in the
   * Map Root published for this revision.
   * Map personalities should use metadata to persist any state needed later
   * to continue mapping from an external data source.
   * </pre>
   *
   * <code>bytes metadata = 3;</code>
   */
  com.google.protobuf.ByteString getMetadata();

  /**
   * <pre>
   * The map revision to associate the leaves with. The request will fail if
   * this revision already exists, does not match the current write revision, or
   * is not positive. Note that revision = 0 is reserved for the empty tree.
   * </pre>
   *
   * <code>int64 expect_revision = 4;</code>
   */
  long getExpectRevision();
}
