// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trillian_log_api.proto

package com.google.trillian.proto;

/**
 * Protobuf type {@code trillian.GetInclusionProofByHashResponse}
 */
public  final class GetInclusionProofByHashResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:trillian.GetInclusionProofByHashResponse)
    GetInclusionProofByHashResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GetInclusionProofByHashResponse.newBuilder() to construct.
  private GetInclusionProofByHashResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GetInclusionProofByHashResponse() {
    proof_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GetInclusionProofByHashResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              proof_ = new java.util.ArrayList<com.google.trillian.proto.Proof>();
              mutable_bitField0_ |= 0x00000001;
            }
            proof_.add(
                input.readMessage(com.google.trillian.proto.Proof.parser(), extensionRegistry));
            break;
          }
          case 26: {
            com.google.trillian.proto.SignedLogRoot.Builder subBuilder = null;
            if (signedLogRoot_ != null) {
              subBuilder = signedLogRoot_.toBuilder();
            }
            signedLogRoot_ = input.readMessage(com.google.trillian.proto.SignedLogRoot.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(signedLogRoot_);
              signedLogRoot_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        proof_ = java.util.Collections.unmodifiableList(proof_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_GetInclusionProofByHashResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_GetInclusionProofByHashResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.trillian.proto.GetInclusionProofByHashResponse.class, com.google.trillian.proto.GetInclusionProofByHashResponse.Builder.class);
  }

  private int bitField0_;
  public static final int PROOF_FIELD_NUMBER = 2;
  private java.util.List<com.google.trillian.proto.Proof> proof_;
  /**
   * <pre>
   * Logs can potentially contain leaves with duplicate hashes so it's possible
   * for this to return multiple proofs.  If the leaf index for a particular
   * instance of the requested Merkle leaf hash is beyond the requested tree
   * size, the corresponding proof entry will be missing.
   * </pre>
   *
   * <code>repeated .trillian.Proof proof = 2;</code>
   */
  public java.util.List<com.google.trillian.proto.Proof> getProofList() {
    return proof_;
  }
  /**
   * <pre>
   * Logs can potentially contain leaves with duplicate hashes so it's possible
   * for this to return multiple proofs.  If the leaf index for a particular
   * instance of the requested Merkle leaf hash is beyond the requested tree
   * size, the corresponding proof entry will be missing.
   * </pre>
   *
   * <code>repeated .trillian.Proof proof = 2;</code>
   */
  public java.util.List<? extends com.google.trillian.proto.ProofOrBuilder> 
      getProofOrBuilderList() {
    return proof_;
  }
  /**
   * <pre>
   * Logs can potentially contain leaves with duplicate hashes so it's possible
   * for this to return multiple proofs.  If the leaf index for a particular
   * instance of the requested Merkle leaf hash is beyond the requested tree
   * size, the corresponding proof entry will be missing.
   * </pre>
   *
   * <code>repeated .trillian.Proof proof = 2;</code>
   */
  public int getProofCount() {
    return proof_.size();
  }
  /**
   * <pre>
   * Logs can potentially contain leaves with duplicate hashes so it's possible
   * for this to return multiple proofs.  If the leaf index for a particular
   * instance of the requested Merkle leaf hash is beyond the requested tree
   * size, the corresponding proof entry will be missing.
   * </pre>
   *
   * <code>repeated .trillian.Proof proof = 2;</code>
   */
  public com.google.trillian.proto.Proof getProof(int index) {
    return proof_.get(index);
  }
  /**
   * <pre>
   * Logs can potentially contain leaves with duplicate hashes so it's possible
   * for this to return multiple proofs.  If the leaf index for a particular
   * instance of the requested Merkle leaf hash is beyond the requested tree
   * size, the corresponding proof entry will be missing.
   * </pre>
   *
   * <code>repeated .trillian.Proof proof = 2;</code>
   */
  public com.google.trillian.proto.ProofOrBuilder getProofOrBuilder(
      int index) {
    return proof_.get(index);
  }

  public static final int SIGNED_LOG_ROOT_FIELD_NUMBER = 3;
  private com.google.trillian.proto.SignedLogRoot signedLogRoot_;
  /**
   * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
   */
  public boolean hasSignedLogRoot() {
    return signedLogRoot_ != null;
  }
  /**
   * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
   */
  public com.google.trillian.proto.SignedLogRoot getSignedLogRoot() {
    return signedLogRoot_ == null ? com.google.trillian.proto.SignedLogRoot.getDefaultInstance() : signedLogRoot_;
  }
  /**
   * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
   */
  public com.google.trillian.proto.SignedLogRootOrBuilder getSignedLogRootOrBuilder() {
    return getSignedLogRoot();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < proof_.size(); i++) {
      output.writeMessage(2, proof_.get(i));
    }
    if (signedLogRoot_ != null) {
      output.writeMessage(3, getSignedLogRoot());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < proof_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, proof_.get(i));
    }
    if (signedLogRoot_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getSignedLogRoot());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.trillian.proto.GetInclusionProofByHashResponse)) {
      return super.equals(obj);
    }
    com.google.trillian.proto.GetInclusionProofByHashResponse other = (com.google.trillian.proto.GetInclusionProofByHashResponse) obj;

    boolean result = true;
    result = result && getProofList()
        .equals(other.getProofList());
    result = result && (hasSignedLogRoot() == other.hasSignedLogRoot());
    if (hasSignedLogRoot()) {
      result = result && getSignedLogRoot()
          .equals(other.getSignedLogRoot());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getProofCount() > 0) {
      hash = (37 * hash) + PROOF_FIELD_NUMBER;
      hash = (53 * hash) + getProofList().hashCode();
    }
    if (hasSignedLogRoot()) {
      hash = (37 * hash) + SIGNED_LOG_ROOT_FIELD_NUMBER;
      hash = (53 * hash) + getSignedLogRoot().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.trillian.proto.GetInclusionProofByHashResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.trillian.proto.GetInclusionProofByHashResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code trillian.GetInclusionProofByHashResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:trillian.GetInclusionProofByHashResponse)
      com.google.trillian.proto.GetInclusionProofByHashResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_GetInclusionProofByHashResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_GetInclusionProofByHashResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.trillian.proto.GetInclusionProofByHashResponse.class, com.google.trillian.proto.GetInclusionProofByHashResponse.Builder.class);
    }

    // Construct using com.google.trillian.proto.GetInclusionProofByHashResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getProofFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (proofBuilder_ == null) {
        proof_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        proofBuilder_.clear();
      }
      if (signedLogRootBuilder_ == null) {
        signedLogRoot_ = null;
      } else {
        signedLogRoot_ = null;
        signedLogRootBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.trillian.proto.TrillianLogApiProto.internal_static_trillian_GetInclusionProofByHashResponse_descriptor;
    }

    public com.google.trillian.proto.GetInclusionProofByHashResponse getDefaultInstanceForType() {
      return com.google.trillian.proto.GetInclusionProofByHashResponse.getDefaultInstance();
    }

    public com.google.trillian.proto.GetInclusionProofByHashResponse build() {
      com.google.trillian.proto.GetInclusionProofByHashResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.trillian.proto.GetInclusionProofByHashResponse buildPartial() {
      com.google.trillian.proto.GetInclusionProofByHashResponse result = new com.google.trillian.proto.GetInclusionProofByHashResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (proofBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          proof_ = java.util.Collections.unmodifiableList(proof_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.proof_ = proof_;
      } else {
        result.proof_ = proofBuilder_.build();
      }
      if (signedLogRootBuilder_ == null) {
        result.signedLogRoot_ = signedLogRoot_;
      } else {
        result.signedLogRoot_ = signedLogRootBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.trillian.proto.GetInclusionProofByHashResponse) {
        return mergeFrom((com.google.trillian.proto.GetInclusionProofByHashResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.trillian.proto.GetInclusionProofByHashResponse other) {
      if (other == com.google.trillian.proto.GetInclusionProofByHashResponse.getDefaultInstance()) return this;
      if (proofBuilder_ == null) {
        if (!other.proof_.isEmpty()) {
          if (proof_.isEmpty()) {
            proof_ = other.proof_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureProofIsMutable();
            proof_.addAll(other.proof_);
          }
          onChanged();
        }
      } else {
        if (!other.proof_.isEmpty()) {
          if (proofBuilder_.isEmpty()) {
            proofBuilder_.dispose();
            proofBuilder_ = null;
            proof_ = other.proof_;
            bitField0_ = (bitField0_ & ~0x00000001);
            proofBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProofFieldBuilder() : null;
          } else {
            proofBuilder_.addAllMessages(other.proof_);
          }
        }
      }
      if (other.hasSignedLogRoot()) {
        mergeSignedLogRoot(other.getSignedLogRoot());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.trillian.proto.GetInclusionProofByHashResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.trillian.proto.GetInclusionProofByHashResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.trillian.proto.Proof> proof_ =
      java.util.Collections.emptyList();
    private void ensureProofIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        proof_ = new java.util.ArrayList<com.google.trillian.proto.Proof>(proof_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.trillian.proto.Proof, com.google.trillian.proto.Proof.Builder, com.google.trillian.proto.ProofOrBuilder> proofBuilder_;

    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public java.util.List<com.google.trillian.proto.Proof> getProofList() {
      if (proofBuilder_ == null) {
        return java.util.Collections.unmodifiableList(proof_);
      } else {
        return proofBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public int getProofCount() {
      if (proofBuilder_ == null) {
        return proof_.size();
      } else {
        return proofBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public com.google.trillian.proto.Proof getProof(int index) {
      if (proofBuilder_ == null) {
        return proof_.get(index);
      } else {
        return proofBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder setProof(
        int index, com.google.trillian.proto.Proof value) {
      if (proofBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProofIsMutable();
        proof_.set(index, value);
        onChanged();
      } else {
        proofBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder setProof(
        int index, com.google.trillian.proto.Proof.Builder builderForValue) {
      if (proofBuilder_ == null) {
        ensureProofIsMutable();
        proof_.set(index, builderForValue.build());
        onChanged();
      } else {
        proofBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder addProof(com.google.trillian.proto.Proof value) {
      if (proofBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProofIsMutable();
        proof_.add(value);
        onChanged();
      } else {
        proofBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder addProof(
        int index, com.google.trillian.proto.Proof value) {
      if (proofBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProofIsMutable();
        proof_.add(index, value);
        onChanged();
      } else {
        proofBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder addProof(
        com.google.trillian.proto.Proof.Builder builderForValue) {
      if (proofBuilder_ == null) {
        ensureProofIsMutable();
        proof_.add(builderForValue.build());
        onChanged();
      } else {
        proofBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder addProof(
        int index, com.google.trillian.proto.Proof.Builder builderForValue) {
      if (proofBuilder_ == null) {
        ensureProofIsMutable();
        proof_.add(index, builderForValue.build());
        onChanged();
      } else {
        proofBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder addAllProof(
        java.lang.Iterable<? extends com.google.trillian.proto.Proof> values) {
      if (proofBuilder_ == null) {
        ensureProofIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, proof_);
        onChanged();
      } else {
        proofBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder clearProof() {
      if (proofBuilder_ == null) {
        proof_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        proofBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public Builder removeProof(int index) {
      if (proofBuilder_ == null) {
        ensureProofIsMutable();
        proof_.remove(index);
        onChanged();
      } else {
        proofBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public com.google.trillian.proto.Proof.Builder getProofBuilder(
        int index) {
      return getProofFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public com.google.trillian.proto.ProofOrBuilder getProofOrBuilder(
        int index) {
      if (proofBuilder_ == null) {
        return proof_.get(index);  } else {
        return proofBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public java.util.List<? extends com.google.trillian.proto.ProofOrBuilder> 
         getProofOrBuilderList() {
      if (proofBuilder_ != null) {
        return proofBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(proof_);
      }
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public com.google.trillian.proto.Proof.Builder addProofBuilder() {
      return getProofFieldBuilder().addBuilder(
          com.google.trillian.proto.Proof.getDefaultInstance());
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public com.google.trillian.proto.Proof.Builder addProofBuilder(
        int index) {
      return getProofFieldBuilder().addBuilder(
          index, com.google.trillian.proto.Proof.getDefaultInstance());
    }
    /**
     * <pre>
     * Logs can potentially contain leaves with duplicate hashes so it's possible
     * for this to return multiple proofs.  If the leaf index for a particular
     * instance of the requested Merkle leaf hash is beyond the requested tree
     * size, the corresponding proof entry will be missing.
     * </pre>
     *
     * <code>repeated .trillian.Proof proof = 2;</code>
     */
    public java.util.List<com.google.trillian.proto.Proof.Builder> 
         getProofBuilderList() {
      return getProofFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.trillian.proto.Proof, com.google.trillian.proto.Proof.Builder, com.google.trillian.proto.ProofOrBuilder> 
        getProofFieldBuilder() {
      if (proofBuilder_ == null) {
        proofBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.trillian.proto.Proof, com.google.trillian.proto.Proof.Builder, com.google.trillian.proto.ProofOrBuilder>(
                proof_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        proof_ = null;
      }
      return proofBuilder_;
    }

    private com.google.trillian.proto.SignedLogRoot signedLogRoot_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.trillian.proto.SignedLogRoot, com.google.trillian.proto.SignedLogRoot.Builder, com.google.trillian.proto.SignedLogRootOrBuilder> signedLogRootBuilder_;
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public boolean hasSignedLogRoot() {
      return signedLogRootBuilder_ != null || signedLogRoot_ != null;
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public com.google.trillian.proto.SignedLogRoot getSignedLogRoot() {
      if (signedLogRootBuilder_ == null) {
        return signedLogRoot_ == null ? com.google.trillian.proto.SignedLogRoot.getDefaultInstance() : signedLogRoot_;
      } else {
        return signedLogRootBuilder_.getMessage();
      }
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public Builder setSignedLogRoot(com.google.trillian.proto.SignedLogRoot value) {
      if (signedLogRootBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        signedLogRoot_ = value;
        onChanged();
      } else {
        signedLogRootBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public Builder setSignedLogRoot(
        com.google.trillian.proto.SignedLogRoot.Builder builderForValue) {
      if (signedLogRootBuilder_ == null) {
        signedLogRoot_ = builderForValue.build();
        onChanged();
      } else {
        signedLogRootBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public Builder mergeSignedLogRoot(com.google.trillian.proto.SignedLogRoot value) {
      if (signedLogRootBuilder_ == null) {
        if (signedLogRoot_ != null) {
          signedLogRoot_ =
            com.google.trillian.proto.SignedLogRoot.newBuilder(signedLogRoot_).mergeFrom(value).buildPartial();
        } else {
          signedLogRoot_ = value;
        }
        onChanged();
      } else {
        signedLogRootBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public Builder clearSignedLogRoot() {
      if (signedLogRootBuilder_ == null) {
        signedLogRoot_ = null;
        onChanged();
      } else {
        signedLogRoot_ = null;
        signedLogRootBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public com.google.trillian.proto.SignedLogRoot.Builder getSignedLogRootBuilder() {
      
      onChanged();
      return getSignedLogRootFieldBuilder().getBuilder();
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    public com.google.trillian.proto.SignedLogRootOrBuilder getSignedLogRootOrBuilder() {
      if (signedLogRootBuilder_ != null) {
        return signedLogRootBuilder_.getMessageOrBuilder();
      } else {
        return signedLogRoot_ == null ?
            com.google.trillian.proto.SignedLogRoot.getDefaultInstance() : signedLogRoot_;
      }
    }
    /**
     * <code>.trillian.SignedLogRoot signed_log_root = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.trillian.proto.SignedLogRoot, com.google.trillian.proto.SignedLogRoot.Builder, com.google.trillian.proto.SignedLogRootOrBuilder> 
        getSignedLogRootFieldBuilder() {
      if (signedLogRootBuilder_ == null) {
        signedLogRootBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.trillian.proto.SignedLogRoot, com.google.trillian.proto.SignedLogRoot.Builder, com.google.trillian.proto.SignedLogRootOrBuilder>(
                getSignedLogRoot(),
                getParentForChildren(),
                isClean());
        signedLogRoot_ = null;
      }
      return signedLogRootBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:trillian.GetInclusionProofByHashResponse)
  }

  // @@protoc_insertion_point(class_scope:trillian.GetInclusionProofByHashResponse)
  private static final com.google.trillian.proto.GetInclusionProofByHashResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.trillian.proto.GetInclusionProofByHashResponse();
  }

  public static com.google.trillian.proto.GetInclusionProofByHashResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GetInclusionProofByHashResponse>
      PARSER = new com.google.protobuf.AbstractParser<GetInclusionProofByHashResponse>() {
    public GetInclusionProofByHashResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GetInclusionProofByHashResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GetInclusionProofByHashResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GetInclusionProofByHashResponse> getParserForType() {
    return PARSER;
  }

  public com.google.trillian.proto.GetInclusionProofByHashResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

